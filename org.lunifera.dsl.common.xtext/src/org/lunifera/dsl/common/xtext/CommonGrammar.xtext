/**
 * Copyright (c) 2011 - 2015, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *         Florian Pirchner - Initial implementation
 */
grammar org.lunifera.dsl.common.xtext.CommonGrammar with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.lunifera.org/dsl/common/types/v1" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TypedPackage returns types::LTypedPackage:
	{types::LTypedPackage}
	'package' name=QualifiedName ('{'
	(imports+=Import)*
	(types+=Type)*
	'}')?;

Type returns types::LType:
	ScalarType | Class;

	/**
 * Needs to be overridden by sub grammar
 */
Class returns types::LClass:
	{types::LClass} annotations+=AnnotationDef*
	{types::LClass.annotationInfo=current}
	'class';

Import returns types::LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard ';';

DataType returns types::LDataType:
	'datatype' name=ValidIDWithKeywords
	(('jvmType' jvmTypeReference=JvmTypeReference (asPrimitive?='as primitive')? constraints+=DataTypeConstraint*)
	|
	(date?='dateType' dateType=DateType constraints+=DateConstraint*)
	|
	(asBlob?='as blob' constraints+=BlobTypeConstraint*))
	';';

AllConstraints returns types::LDatatypeConstraint:
	DtCAssertFalse | DtCAssertTrue | DtCDecimalMax | DtCDecimalMin | DtCDigits |
	DtCNumericMax | DtCNumericMin | DtCNotNull | DtCNull | DtCRegEx | DtCSize | DtCFuture | DtCPast
;

DataTypeConstraint returns types::LDatatypeConstraint:
	DtCAssertFalse | DtCAssertTrue | DtCDecimalMax | DtCDecimalMin | DtCDigits |
	DtCNumericMax | DtCNumericMin | DtCNotNull | DtCNull | DtCRegEx | DtCSize
;

DateConstraint returns types::LDatatypeConstraint:
	DtCFuture | DtCPast | DtCNotNull | DtCNull
;

BlobTypeConstraint returns types::LDatatypeConstraint:
	DtCNotNull | DtCNull
;

DtCAssertFalse returns types::LDtCAssertFalse:
	{types::LDtCAssertFalse}
	'isFalse';

DtCAssertTrue returns types::LDtCAssertTrue:
	{types::LDtCAssertTrue}
	'isTrue';

DtCDecimalMax returns types::LDtCDecimalMax:
	{types::LDtCDecimalMax}
	'maxDecimal' '('max=LDecimal')';

DtCDecimalMin returns types::LDtCDecimalMin:
	{types::LDtCDecimalMin}
	'minDecimal' '('min=LDecimal')';

DtCDigits returns types::LDtCDigits:
	{types::LDtCDigits}
	'digits' '(' intDigits=INT ',' fractionDigits=INT ')';

DtCFuture returns types::LDtCFuture:
	{types::LDtCFuture}
	'isFuture';

DtCPast returns types::LDtCPast:
	{types::LDtCPast}
	'isPast';

DtCNumericMax returns types::LDtCNumericMax:
	{types::LDtCNumericMax}
	'maxNumber' '(' max=INT ')';

DtCNumericMin returns types::LDtCNumericMin:
	{types::LDtCNumericMin}
	'minNumber' '(' min=INT')';

DtCNotNull returns types::LDtCNotNull:
	{types::LDtCNotNull}
	'isNotNull';

DtCNull returns types::LDtCNull:
	{types::LDtCNull}
	'isNull';

DtCRegEx returns types::LDtCRegEx:
	{types::LDtCRegEx}
	'regex' '(' pattern=STRING ')';

DtCSize returns types::LDtCSize:
	{types::LDtCSize}
	'minSize' '('min=INT')' 'maxSize' '('max=INT')';

enum DateType returns types::LDateType:
	DATE='date' | TIME='time' | TIMESTAMP='timestamp';

ScalarType returns types::LScalarType:
	DataType | Enum;

Modifier returns types::LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;

Enum returns types::LEnum:
	'enum' name=ID
	'{'
	literals+=EnumLiteral (', ' literals+=EnumLiteral)*
	'}';

EnumLiteral returns types::LEnumLiteral:
	name=ID ('(' default?='asDefault'? & null?='forNull'? ')' ('=' value=INT)?)?;

AnnotationDef returns types::LAnnotationDef:
	=> (annotation=XAnnotation);

enum LVisibility returns types::LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

ResultFilters returns types::LResultFilters:
	{types::LResultFilters}
	'constraints' '{'
		resultFilters+=ResultFilter*
	'}';

ResultFilter returns types::LResultFilter:
	AttributeMatchingConstraint;

AttributeMatchingConstraint returns types::LAttributeMatchingConstraint:
	attribute=[types::LAttribute] comparatorType=LComparatorType (matchingValue=STRING | =>
	matchingLiteral=[types::LEnumLiteral]) ';';

KeyAndValue returns types::LKeyAndValue:
	'key' '=' key=STRING 'value' '=' value=STRING;

enum LComparatorType returns types::LComparatorType:
	EQUALS='==' |
	GREATER='>' |
	LOWER='<' |
	GREATER_EQ='>=' |
	LOWER_EQ='<=' |
	NOT_EQ='<>';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

ValidIDWithKeywords:
	'cachable' | 'id' | 'uuid' | 'transient' | 'version' | 'derived'
	'collection' | 'refers' | 'settings' | 'lazy' |
	'notnull' | 'dto' | 'date' | 'mapto' | 'ref' | 'cascade' | 'var' |
	ID;

ValidLFQNWithKeywords:
	ValidIDWithKeywords ('.' ValidIDWithKeywords)*;

Multiplicity returns types::LMultiplicity:
	'[' (lower=LowerBound) ('..' upper=UpperBound)? ']';

enum LowerBound returns types::LLowerBound:
	MANY='*' | ZERO='0' | OPTIONAL='?' | ATLEASTONE='+' | ONE='1';

enum UpperBound returns types::LUpperBound:
	MANY='*' | ONE='1';

LInt returns ecore::EInt:
	INT;

LDecimal returns ecore::EFloat:
	DECIMAL
;
	