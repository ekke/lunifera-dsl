/*
* generated by Xtext
*/
package org.lunifera.dsl.services.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.lunifera.dsl.common.xtext.services.CommonGrammarGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ServicesGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LServiceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LServiceModel");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesTypedPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//LServiceModel returns service::LServiceModel:
		//	packages+=TypedPackage*;
		public ParserRule getRule() { return rule; }

		//packages+=TypedPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//TypedPackage
		public RuleCall getPackagesTypedPackageParserRuleCall_0() { return cPackagesTypedPackageParserRuleCall_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLDTOServiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationDefParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cLDTOServiceAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cDtoserviceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cProvidesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDtoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDtoLDtoCrossReference_6_0 = (CrossReference)cDtoAssignment_6.eContents().get(0);
		private final RuleCall cDtoLDtoIDTerminalRuleCall_6_0_1 = (RuleCall)cDtoLDtoCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cMutablePersistenceIdAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cMutablePersistenceIdMutableKeyword_8_0_0 = (Keyword)cMutablePersistenceIdAssignment_8_0.eContents().get(0);
		private final Keyword cPersistenceIDKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cPersistenceIdAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cPersistenceIdQualifiedNameParserRuleCall_8_2_0 = (RuleCall)cPersistenceIdAssignment_8_2.eContents().get(0);
		private final Assignment cInjectedServicesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInjectedServicesInjectedServicesParserRuleCall_9_0 = (RuleCall)cInjectedServicesAssignment_9.eContents().get(0);
		private final Assignment cOperationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOperationsOperationParserRuleCall_10_0 = (RuleCall)cOperationsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Class returns service::LDTOService:
		//	{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
		//	name=ValidIDWithKeywords "provides" dto=[dto::LDto] "{" (mutablePersistenceId?="mutable"? "persistenceID"
		//	persistenceId=QualifiedName)? injectedServices=InjectedServices operations+=Operation* "}";
		public ParserRule getRule() { return rule; }

		//{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
		//name=ValidIDWithKeywords "provides" dto=[dto::LDto] "{" (mutablePersistenceId?="mutable"? "persistenceID"
		//persistenceId=QualifiedName)? injectedServices=InjectedServices operations+=Operation* "}"
		public Group getGroup() { return cGroup; }

		//{service::LDTOService}
		public Action getLDTOServiceAction_0() { return cLDTOServiceAction_0; }

		//annotations+=AnnotationDef*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationDef
		public RuleCall getAnnotationsAnnotationDefParserRuleCall_1_0() { return cAnnotationsAnnotationDefParserRuleCall_1_0; }

		//{service::LDTOService.annotationInfo=current}
		public Action getLDTOServiceAnnotationInfoAction_2() { return cLDTOServiceAnnotationInfoAction_2; }

		//"dtoservice"
		public Keyword getDtoserviceKeyword_3() { return cDtoserviceKeyword_3; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_4_0() { return cNameValidIDWithKeywordsParserRuleCall_4_0; }

		//"provides"
		public Keyword getProvidesKeyword_5() { return cProvidesKeyword_5; }

		//dto=[dto::LDto]
		public Assignment getDtoAssignment_6() { return cDtoAssignment_6; }

		//[dto::LDto]
		public CrossReference getDtoLDtoCrossReference_6_0() { return cDtoLDtoCrossReference_6_0; }

		//ID
		public RuleCall getDtoLDtoIDTerminalRuleCall_6_0_1() { return cDtoLDtoIDTerminalRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(mutablePersistenceId?="mutable"? "persistenceID" persistenceId=QualifiedName)?
		public Group getGroup_8() { return cGroup_8; }

		//mutablePersistenceId?="mutable"?
		public Assignment getMutablePersistenceIdAssignment_8_0() { return cMutablePersistenceIdAssignment_8_0; }

		//"mutable"
		public Keyword getMutablePersistenceIdMutableKeyword_8_0_0() { return cMutablePersistenceIdMutableKeyword_8_0_0; }

		//"persistenceID"
		public Keyword getPersistenceIDKeyword_8_1() { return cPersistenceIDKeyword_8_1; }

		//persistenceId=QualifiedName
		public Assignment getPersistenceIdAssignment_8_2() { return cPersistenceIdAssignment_8_2; }

		//QualifiedName
		public RuleCall getPersistenceIdQualifiedNameParserRuleCall_8_2_0() { return cPersistenceIdQualifiedNameParserRuleCall_8_2_0; }

		//injectedServices=InjectedServices
		public Assignment getInjectedServicesAssignment_9() { return cInjectedServicesAssignment_9; }

		//InjectedServices
		public RuleCall getInjectedServicesInjectedServicesParserRuleCall_9_0() { return cInjectedServicesInjectedServicesParserRuleCall_9_0; }

		//operations+=Operation*
		public Assignment getOperationsAssignment_10() { return cOperationsAssignment_10; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_10_0() { return cOperationsOperationParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class InjectedServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InjectedServices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLInjectedServicesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cServicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServicesInjectedServiceParserRuleCall_1_0 = (RuleCall)cServicesAssignment_1.eContents().get(0);
		
		//InjectedServices returns service::LInjectedServices:
		//	{service::LInjectedServices} services+=InjectedService*;
		public ParserRule getRule() { return rule; }

		//{service::LInjectedServices} services+=InjectedService*
		public Group getGroup() { return cGroup; }

		//{service::LInjectedServices}
		public Action getLInjectedServicesAction_0() { return cLInjectedServicesAction_0; }

		//services+=InjectedService*
		public Assignment getServicesAssignment_1() { return cServicesAssignment_1; }

		//InjectedService
		public RuleCall getServicesInjectedServiceParserRuleCall_1_0() { return cServicesInjectedServiceParserRuleCall_1_0; }
	}

	public class InjectedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InjectedService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLInjectedServiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInjectServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Assignment cServiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServiceJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cServiceAssignment_3.eContents().get(0);
		private final Assignment cAttributeNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeNameIDTerminalRuleCall_4_0 = (RuleCall)cAttributeNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InjectedService returns service::LInjectedService:
		//	{service::LInjectedService} "injectService" cardinality=Cardinality? service=JvmTypeReference attributeName=ID ";";
		public ParserRule getRule() { return rule; }

		//{service::LInjectedService} "injectService" cardinality=Cardinality? service=JvmTypeReference attributeName=ID ";"
		public Group getGroup() { return cGroup; }

		//{service::LInjectedService}
		public Action getLInjectedServiceAction_0() { return cLInjectedServiceAction_0; }

		//"injectService"
		public Keyword getInjectServiceKeyword_1() { return cInjectServiceKeyword_1; }

		//cardinality=Cardinality?
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_2_0() { return cCardinalityCardinalityEnumRuleCall_2_0; }

		//service=JvmTypeReference
		public Assignment getServiceAssignment_3() { return cServiceAssignment_3; }

		//JvmTypeReference
		public RuleCall getServiceJvmTypeReferenceParserRuleCall_3_0() { return cServiceJvmTypeReferenceParserRuleCall_3_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_4() { return cAttributeNameAssignment_4; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_4_0() { return cAttributeNameIDTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FilterableAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterableAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterableFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFilterableFeaturesLDtoFeatureCrossReference_2_0 = (CrossReference)cFilterableFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cFilterableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1 = (RuleCall)cFilterableFeaturesLDtoFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilterableFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFilterableFeaturesLDtoFeatureCrossReference_3_1_0 = (CrossReference)cFilterableFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cFilterableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1 = (RuleCall)cFilterableFeaturesLDtoFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FilterableAttributes returns service::LFilterableAttributes:
		//	"filterable" "{" filterableFeatures+=[dto::LDtoFeature|LFQN] ("," filterableFeatures+=[dto::LDtoFeature|LFQN])* ";"
		//	"}";
		public ParserRule getRule() { return rule; }

		//"filterable" "{" filterableFeatures+=[dto::LDtoFeature|LFQN] ("," filterableFeatures+=[dto::LDtoFeature|LFQN])* ";" "}"
		public Group getGroup() { return cGroup; }

		//"filterable"
		public Keyword getFilterableKeyword_0() { return cFilterableKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//filterableFeatures+=[dto::LDtoFeature|LFQN]
		public Assignment getFilterableFeaturesAssignment_2() { return cFilterableFeaturesAssignment_2; }

		//[dto::LDtoFeature|LFQN]
		public CrossReference getFilterableFeaturesLDtoFeatureCrossReference_2_0() { return cFilterableFeaturesLDtoFeatureCrossReference_2_0; }

		//LFQN
		public RuleCall getFilterableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1() { return cFilterableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1; }

		//("," filterableFeatures+=[dto::LDtoFeature|LFQN])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//filterableFeatures+=[dto::LDtoFeature|LFQN]
		public Assignment getFilterableFeaturesAssignment_3_1() { return cFilterableFeaturesAssignment_3_1; }

		//[dto::LDtoFeature|LFQN]
		public CrossReference getFilterableFeaturesLDtoFeatureCrossReference_3_1_0() { return cFilterableFeaturesLDtoFeatureCrossReference_3_1_0; }

		//LFQN
		public RuleCall getFilterableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1() { return cFilterableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SortableAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortableAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortableFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSortableFeaturesLDtoFeatureCrossReference_2_0 = (CrossReference)cSortableFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cSortableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1 = (RuleCall)cSortableFeaturesLDtoFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSortableFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSortableFeaturesLDtoFeatureCrossReference_3_1_0 = (CrossReference)cSortableFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cSortableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1 = (RuleCall)cSortableFeaturesLDtoFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SortableAttributes returns service::LSortableAttributes:
		//	"sortable" "{" sortableFeatures+=[dto::LDtoFeature|LFQN] ("," sortableFeatures+=[dto::LDtoFeature|LFQN])* ";" "}";
		public ParserRule getRule() { return rule; }

		//"sortable" "{" sortableFeatures+=[dto::LDtoFeature|LFQN] ("," sortableFeatures+=[dto::LDtoFeature|LFQN])* ";" "}"
		public Group getGroup() { return cGroup; }

		//"sortable"
		public Keyword getSortableKeyword_0() { return cSortableKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//sortableFeatures+=[dto::LDtoFeature|LFQN]
		public Assignment getSortableFeaturesAssignment_2() { return cSortableFeaturesAssignment_2; }

		//[dto::LDtoFeature|LFQN]
		public CrossReference getSortableFeaturesLDtoFeatureCrossReference_2_0() { return cSortableFeaturesLDtoFeatureCrossReference_2_0; }

		//LFQN
		public RuleCall getSortableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1() { return cSortableFeaturesLDtoFeatureLFQNParserRuleCall_2_0_1; }

		//("," sortableFeatures+=[dto::LDtoFeature|LFQN])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//sortableFeatures+=[dto::LDtoFeature|LFQN]
		public Assignment getSortableFeaturesAssignment_3_1() { return cSortableFeaturesAssignment_3_1; }

		//[dto::LDtoFeature|LFQN]
		public CrossReference getSortableFeaturesLDtoFeatureCrossReference_3_1_0() { return cSortableFeaturesLDtoFeatureCrossReference_3_1_0; }

		//LFQN
		public RuleCall getSortableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1() { return cSortableFeaturesLDtoFeatureLFQNParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLServiceOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationDefParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDefKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cParamsAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_4_0_0 = (RuleCall)cParamsAssignment_2_4_0.eContents().get(0);
		private final Group cGroup_2_4_1 = (Group)cGroup_2_4.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_2_4_1_0 = (Keyword)cGroup_2_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_4_1_1 = (Assignment)cGroup_2_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_4_1_1_0 = (RuleCall)cParamsAssignment_2_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cBodyAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cBodyXExpressionParserRuleCall_2_6_0 = (RuleCall)cBodyAssignment_2_6.eContents().get(0);
		
		//Operation returns service::LServiceOperation:
		//	{service::LServiceOperation} annotations+=AnnotationDef* ("def" type=JvmTypeReference name=ID "("
		//	(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression);
		public ParserRule getRule() { return rule; }

		//{service::LServiceOperation} annotations+=AnnotationDef* ("def" type=JvmTypeReference name=ID "("
		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression)
		public Group getGroup() { return cGroup; }

		//{service::LServiceOperation}
		public Action getLServiceOperationAction_0() { return cLServiceOperationAction_0; }

		//annotations+=AnnotationDef*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationDef
		public RuleCall getAnnotationsAnnotationDefParserRuleCall_1_0() { return cAnnotationsAnnotationDefParserRuleCall_1_0; }

		//"def" type=JvmTypeReference name=ID "(" (params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")"
		//body=XExpression
		public Group getGroup_2() { return cGroup_2; }

		//"def"
		public Keyword getDefKeyword_2_0() { return cDefKeyword_2_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }

		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_4_0() { return cParamsAssignment_2_4_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_4_0_0; }

		//(", " params+=FullJvmFormalParameter)*
		public Group getGroup_2_4_1() { return cGroup_2_4_1; }

		//", "
		public Keyword getCommaSpaceKeyword_2_4_1_0() { return cCommaSpaceKeyword_2_4_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_4_1_1() { return cParamsAssignment_2_4_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//body=XExpression
		public Assignment getBodyAssignment_2_6() { return cBodyAssignment_2_6; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_2_6_0() { return cBodyXExpressionParserRuleCall_2_6_0; }
	}
	
	
	public class CardinalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cZERO_TO_ONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cZERO_TO_ONEOptionalKeyword_0_0 = (Keyword)cZERO_TO_ONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONE_TO_ONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONE_TO_ONEMandatoryKeyword_1_0 = (Keyword)cONE_TO_ONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cZERO_TO_MANYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cZERO_TO_MANYZeroToManyKeyword_2_0 = (Keyword)cZERO_TO_MANYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cONE_TO_MANYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cONE_TO_MANYOneToManyKeyword_3_0 = (Keyword)cONE_TO_MANYEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Cardinality returns service::LCardinality:
		//	ZERO_TO_ONE="optional" | ONE_TO_ONE="mandatory" | ZERO_TO_MANY="zeroToMany" | ONE_TO_MANY="oneToMany";
		public EnumRule getRule() { return rule; }

		//ZERO_TO_ONE="optional" | ONE_TO_ONE="mandatory" | ZERO_TO_MANY="zeroToMany" | ONE_TO_MANY="oneToMany"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ZERO_TO_ONE="optional"
		public EnumLiteralDeclaration getZERO_TO_ONEEnumLiteralDeclaration_0() { return cZERO_TO_ONEEnumLiteralDeclaration_0; }

		//"optional"
		public Keyword getZERO_TO_ONEOptionalKeyword_0_0() { return cZERO_TO_ONEOptionalKeyword_0_0; }

		//ONE_TO_ONE="mandatory"
		public EnumLiteralDeclaration getONE_TO_ONEEnumLiteralDeclaration_1() { return cONE_TO_ONEEnumLiteralDeclaration_1; }

		//"mandatory"
		public Keyword getONE_TO_ONEMandatoryKeyword_1_0() { return cONE_TO_ONEMandatoryKeyword_1_0; }

		//ZERO_TO_MANY="zeroToMany"
		public EnumLiteralDeclaration getZERO_TO_MANYEnumLiteralDeclaration_2() { return cZERO_TO_MANYEnumLiteralDeclaration_2; }

		//"zeroToMany"
		public Keyword getZERO_TO_MANYZeroToManyKeyword_2_0() { return cZERO_TO_MANYZeroToManyKeyword_2_0; }

		//ONE_TO_MANY="oneToMany"
		public EnumLiteralDeclaration getONE_TO_MANYEnumLiteralDeclaration_3() { return cONE_TO_MANYEnumLiteralDeclaration_3; }

		//"oneToMany"
		public Keyword getONE_TO_MANYOneToManyKeyword_3_0() { return cONE_TO_MANYOneToManyKeyword_3_0; }
	}
	
	private final LServiceModelElements pLServiceModel;
	private final ClassElements pClass;
	private final InjectedServicesElements pInjectedServices;
	private final InjectedServiceElements pInjectedService;
	private final FilterableAttributesElements pFilterableAttributes;
	private final SortableAttributesElements pSortableAttributes;
	private final OperationElements pOperation;
	private final CardinalityElements unknownRuleCardinality;
	
	private final Grammar grammar;

	private final CommonGrammarGrammarAccess gaCommonGrammar;

	@Inject
	public ServicesGrammarGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarGrammarAccess gaCommonGrammar) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommonGrammar = gaCommonGrammar;
		this.pLServiceModel = new LServiceModelElements();
		this.pClass = new ClassElements();
		this.pInjectedServices = new InjectedServicesElements();
		this.pInjectedService = new InjectedServiceElements();
		this.pFilterableAttributes = new FilterableAttributesElements();
		this.pSortableAttributes = new SortableAttributesElements();
		this.pOperation = new OperationElements();
		this.unknownRuleCardinality = new CardinalityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.dsl.services.xtext.ServicesGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarGrammarAccess getCommonGrammarGrammarAccess() {
		return gaCommonGrammar;
	}

	
	//LServiceModel returns service::LServiceModel:
	//	packages+=TypedPackage*;
	public LServiceModelElements getLServiceModelAccess() {
		return pLServiceModel;
	}
	
	public ParserRule getLServiceModelRule() {
		return getLServiceModelAccess().getRule();
	}

	//Class returns service::LDTOService:
	//	{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
	//	name=ValidIDWithKeywords "provides" dto=[dto::LDto] "{" (mutablePersistenceId?="mutable"? "persistenceID"
	//	persistenceId=QualifiedName)? injectedServices=InjectedServices operations+=Operation* "}";
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//InjectedServices returns service::LInjectedServices:
	//	{service::LInjectedServices} services+=InjectedService*;
	public InjectedServicesElements getInjectedServicesAccess() {
		return pInjectedServices;
	}
	
	public ParserRule getInjectedServicesRule() {
		return getInjectedServicesAccess().getRule();
	}

	//InjectedService returns service::LInjectedService:
	//	{service::LInjectedService} "injectService" cardinality=Cardinality? service=JvmTypeReference attributeName=ID ";";
	public InjectedServiceElements getInjectedServiceAccess() {
		return pInjectedService;
	}
	
	public ParserRule getInjectedServiceRule() {
		return getInjectedServiceAccess().getRule();
	}

	//FilterableAttributes returns service::LFilterableAttributes:
	//	"filterable" "{" filterableFeatures+=[dto::LDtoFeature|LFQN] ("," filterableFeatures+=[dto::LDtoFeature|LFQN])* ";"
	//	"}";
	public FilterableAttributesElements getFilterableAttributesAccess() {
		return pFilterableAttributes;
	}
	
	public ParserRule getFilterableAttributesRule() {
		return getFilterableAttributesAccess().getRule();
	}

	//SortableAttributes returns service::LSortableAttributes:
	//	"sortable" "{" sortableFeatures+=[dto::LDtoFeature|LFQN] ("," sortableFeatures+=[dto::LDtoFeature|LFQN])* ";" "}";
	public SortableAttributesElements getSortableAttributesAccess() {
		return pSortableAttributes;
	}
	
	public ParserRule getSortableAttributesRule() {
		return getSortableAttributesAccess().getRule();
	}

	//Operation returns service::LServiceOperation:
	//	{service::LServiceOperation} annotations+=AnnotationDef* ("def" type=JvmTypeReference name=ID "("
	//	(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression);
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//enum Cardinality returns service::LCardinality:
	//	ZERO_TO_ONE="optional" | ONE_TO_ONE="mandatory" | ZERO_TO_MANY="zeroToMany" | ONE_TO_MANY="oneToMany";
	public CardinalityElements getCardinalityAccess() {
		return unknownRuleCardinality;
	}
	
	public EnumRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//TypedPackage returns types::LTypedPackage:
	//	{types::LTypedPackage} "package" name=QualifiedName ("{" imports+=Import* types+=Type* "}")?;
	public CommonGrammarGrammarAccess.TypedPackageElements getTypedPackageAccess() {
		return gaCommonGrammar.getTypedPackageAccess();
	}
	
	public ParserRule getTypedPackageRule() {
		return getTypedPackageAccess().getRule();
	}

	//Type returns types::LType:
	//	ScalarType | Class;
	public CommonGrammarGrammarAccess.TypeElements getTypeAccess() {
		return gaCommonGrammar.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Import returns types::LImport:
	//	"import" importedNamespace=LQualifiedNameWithWildCard ";";
	public CommonGrammarGrammarAccess.ImportElements getImportAccess() {
		return gaCommonGrammar.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//DataType returns types::LDataType:
	//	"datatype" name=ValidIDWithKeywords ("jvmType" jvmTypeReference=JvmTypeReference asPrimitive?="as primitive"?
	//	constraints+=DataTypeConstraint* | date?="dateType" dateType=DateType constraints+=DateConstraint* | asBlob?="as blob"
	//	constraints+=BlobTypeConstraint*) ";";
	public CommonGrammarGrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaCommonGrammar.getDataTypeAccess();
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataTypeConstraint returns types::LDatatypeConstraint:
	//	DtCAssertFalse | DtCAssertTrue | DtCDecimalMax | DtCDecimalMin | DtCDigits | DtCNumericMax | DtCNumericMin |
	//	DtCNotNull | DtCNull | DtCRegEx | DtCSize;
	public CommonGrammarGrammarAccess.DataTypeConstraintElements getDataTypeConstraintAccess() {
		return gaCommonGrammar.getDataTypeConstraintAccess();
	}
	
	public ParserRule getDataTypeConstraintRule() {
		return getDataTypeConstraintAccess().getRule();
	}

	//DateConstraint returns types::LDatatypeConstraint:
	//	DtCFuture | DtCPast;
	public CommonGrammarGrammarAccess.DateConstraintElements getDateConstraintAccess() {
		return gaCommonGrammar.getDateConstraintAccess();
	}
	
	public ParserRule getDateConstraintRule() {
		return getDateConstraintAccess().getRule();
	}

	//BlobTypeConstraint returns types::LDatatypeConstraint:
	//	DtCNotNull | DtCNull;
	public CommonGrammarGrammarAccess.BlobTypeConstraintElements getBlobTypeConstraintAccess() {
		return gaCommonGrammar.getBlobTypeConstraintAccess();
	}
	
	public ParserRule getBlobTypeConstraintRule() {
		return getBlobTypeConstraintAccess().getRule();
	}

	//DtCAssertFalse returns types::LDtCAssertFalse:
	//	{types::LDtCAssertFalse} "isFalse";
	public CommonGrammarGrammarAccess.DtCAssertFalseElements getDtCAssertFalseAccess() {
		return gaCommonGrammar.getDtCAssertFalseAccess();
	}
	
	public ParserRule getDtCAssertFalseRule() {
		return getDtCAssertFalseAccess().getRule();
	}

	//DtCAssertTrue returns types::LDtCAssertTrue:
	//	{types::LDtCAssertTrue} "isTrue";
	public CommonGrammarGrammarAccess.DtCAssertTrueElements getDtCAssertTrueAccess() {
		return gaCommonGrammar.getDtCAssertTrueAccess();
	}
	
	public ParserRule getDtCAssertTrueRule() {
		return getDtCAssertTrueAccess().getRule();
	}

	//DtCDecimalMax returns types::LDtCDecimalMax:
	//	{types::LDtCDecimalMax} "maxDecimal" "(" max=LDecimal ")";
	public CommonGrammarGrammarAccess.DtCDecimalMaxElements getDtCDecimalMaxAccess() {
		return gaCommonGrammar.getDtCDecimalMaxAccess();
	}
	
	public ParserRule getDtCDecimalMaxRule() {
		return getDtCDecimalMaxAccess().getRule();
	}

	//DtCDecimalMin returns types::LDtCDecimalMin:
	//	{types::LDtCDecimalMin} "minDecimal" "(" min=LDecimal ")";
	public CommonGrammarGrammarAccess.DtCDecimalMinElements getDtCDecimalMinAccess() {
		return gaCommonGrammar.getDtCDecimalMinAccess();
	}
	
	public ParserRule getDtCDecimalMinRule() {
		return getDtCDecimalMinAccess().getRule();
	}

	//DtCDigits returns types::LDtCDigits:
	//	{types::LDtCDigits} "digits" "(" intDigits=INT "," fractionDigits=INT ")";
	public CommonGrammarGrammarAccess.DtCDigitsElements getDtCDigitsAccess() {
		return gaCommonGrammar.getDtCDigitsAccess();
	}
	
	public ParserRule getDtCDigitsRule() {
		return getDtCDigitsAccess().getRule();
	}

	//DtCFuture returns types::LDtCFuture:
	//	{types::LDtCFuture} "isFuture";
	public CommonGrammarGrammarAccess.DtCFutureElements getDtCFutureAccess() {
		return gaCommonGrammar.getDtCFutureAccess();
	}
	
	public ParserRule getDtCFutureRule() {
		return getDtCFutureAccess().getRule();
	}

	//DtCPast returns types::LDtCPast:
	//	{types::LDtCPast} "isPast";
	public CommonGrammarGrammarAccess.DtCPastElements getDtCPastAccess() {
		return gaCommonGrammar.getDtCPastAccess();
	}
	
	public ParserRule getDtCPastRule() {
		return getDtCPastAccess().getRule();
	}

	//DtCNumericMax returns types::LDtCNumericMax:
	//	{types::LDtCNumericMax} "maxNumber" "(" max=INT ")";
	public CommonGrammarGrammarAccess.DtCNumericMaxElements getDtCNumericMaxAccess() {
		return gaCommonGrammar.getDtCNumericMaxAccess();
	}
	
	public ParserRule getDtCNumericMaxRule() {
		return getDtCNumericMaxAccess().getRule();
	}

	//DtCNumericMin returns types::LDtCNumericMin:
	//	{types::LDtCNumericMin} "minNumber" "(" min=INT ")";
	public CommonGrammarGrammarAccess.DtCNumericMinElements getDtCNumericMinAccess() {
		return gaCommonGrammar.getDtCNumericMinAccess();
	}
	
	public ParserRule getDtCNumericMinRule() {
		return getDtCNumericMinAccess().getRule();
	}

	//DtCNotNull returns types::LDtCNotNull:
	//	{types::LDtCNotNull} "isNotNull";
	public CommonGrammarGrammarAccess.DtCNotNullElements getDtCNotNullAccess() {
		return gaCommonGrammar.getDtCNotNullAccess();
	}
	
	public ParserRule getDtCNotNullRule() {
		return getDtCNotNullAccess().getRule();
	}

	//DtCNull returns types::LDtCNull:
	//	{types::LDtCNull} "isNull";
	public CommonGrammarGrammarAccess.DtCNullElements getDtCNullAccess() {
		return gaCommonGrammar.getDtCNullAccess();
	}
	
	public ParserRule getDtCNullRule() {
		return getDtCNullAccess().getRule();
	}

	//DtCRegEx returns types::LDtCRegEx:
	//	{types::LDtCRegEx} "regex" "(" pattern=STRING ")";
	public CommonGrammarGrammarAccess.DtCRegExElements getDtCRegExAccess() {
		return gaCommonGrammar.getDtCRegExAccess();
	}
	
	public ParserRule getDtCRegExRule() {
		return getDtCRegExAccess().getRule();
	}

	//DtCSize returns types::LDtCSize:
	//	{types::LDtCSize} "minSize" "(" min=INT ")" "maxSize" "(" max=INT ")";
	public CommonGrammarGrammarAccess.DtCSizeElements getDtCSizeAccess() {
		return gaCommonGrammar.getDtCSizeAccess();
	}
	
	public ParserRule getDtCSizeRule() {
		return getDtCSizeAccess().getRule();
	}

	//enum DateType returns types::LDateType:
	//	DATE="date" | TIME="time" | TIMESTAMP="timestamp";
	public CommonGrammarGrammarAccess.DateTypeElements getDateTypeAccess() {
		return gaCommonGrammar.getDateTypeAccess();
	}
	
	public EnumRule getDateTypeRule() {
		return getDateTypeAccess().getRule();
	}

	//ScalarType returns types::LScalarType:
	//	DataType | Enum;
	public CommonGrammarGrammarAccess.ScalarTypeElements getScalarTypeAccess() {
		return gaCommonGrammar.getScalarTypeAccess();
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	//Modifier returns types::LModifier:
	//	final?="final"? & static?="static"? & visibility=LVisibility;
	public CommonGrammarGrammarAccess.ModifierElements getModifierAccess() {
		return gaCommonGrammar.getModifierAccess();
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Enum returns types::LEnum:
	//	"enum" name=ID "{" literals+=EnumLiteral (", " literals+=EnumLiteral)* "}";
	public CommonGrammarGrammarAccess.EnumElements getEnumAccess() {
		return gaCommonGrammar.getEnumAccess();
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumLiteral returns types::LEnumLiteral:
	//	name=ID ("(" default?="asDefault"? & null?="forNull"? ")" ("=" value=INT)?)?;
	public CommonGrammarGrammarAccess.EnumLiteralElements getEnumLiteralAccess() {
		return gaCommonGrammar.getEnumLiteralAccess();
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}

	//AnnotationDef returns types::LAnnotationDef:
	//	=> (annotation=XAnnotation);
	public CommonGrammarGrammarAccess.AnnotationDefElements getAnnotationDefAccess() {
		return gaCommonGrammar.getAnnotationDefAccess();
	}
	
	public ParserRule getAnnotationDefRule() {
		return getAnnotationDefAccess().getRule();
	}

	//enum LVisibility returns types::LVisibility:
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public CommonGrammarGrammarAccess.LVisibilityElements getLVisibilityAccess() {
		return gaCommonGrammar.getLVisibilityAccess();
	}
	
	public EnumRule getLVisibilityRule() {
		return getLVisibilityAccess().getRule();
	}

	//ResultFilters returns types::LResultFilters:
	//	{types::LResultFilters} "constraints" "{" resultFilters+=ResultFilter* "}";
	public CommonGrammarGrammarAccess.ResultFiltersElements getResultFiltersAccess() {
		return gaCommonGrammar.getResultFiltersAccess();
	}
	
	public ParserRule getResultFiltersRule() {
		return getResultFiltersAccess().getRule();
	}

	//ResultFilter returns types::LResultFilter:
	//	AttributeMatchingConstraint;
	public CommonGrammarGrammarAccess.ResultFilterElements getResultFilterAccess() {
		return gaCommonGrammar.getResultFilterAccess();
	}
	
	public ParserRule getResultFilterRule() {
		return getResultFilterAccess().getRule();
	}

	//AttributeMatchingConstraint returns types::LAttributeMatchingConstraint:
	//	attribute=[types::LAttribute] comparatorType=LComparatorType (matchingValue=STRING | =>
	//	matchingLiteral=[types::LEnumLiteral]) ";";
	public CommonGrammarGrammarAccess.AttributeMatchingConstraintElements getAttributeMatchingConstraintAccess() {
		return gaCommonGrammar.getAttributeMatchingConstraintAccess();
	}
	
	public ParserRule getAttributeMatchingConstraintRule() {
		return getAttributeMatchingConstraintAccess().getRule();
	}

	//KeyAndValue returns types::LKeyAndValue:
	//	"key" "=" key=STRING "value" "=" value=STRING;
	public CommonGrammarGrammarAccess.KeyAndValueElements getKeyAndValueAccess() {
		return gaCommonGrammar.getKeyAndValueAccess();
	}
	
	public ParserRule getKeyAndValueRule() {
		return getKeyAndValueAccess().getRule();
	}

	//enum LComparatorType returns types::LComparatorType:
	//	EQUALS="==" | GREATER=">" | LOWER="<" | GREATER_EQ=">=" | LOWER_EQ="<=" | NOT_EQ="<>";
	public CommonGrammarGrammarAccess.LComparatorTypeElements getLComparatorTypeAccess() {
		return gaCommonGrammar.getLComparatorTypeAccess();
	}
	
	public EnumRule getLComparatorTypeRule() {
		return getLComparatorTypeAccess().getRule();
	}

	//LQualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public CommonGrammarGrammarAccess.LQualifiedNameWithWildCardElements getLQualifiedNameWithWildCardAccess() {
		return gaCommonGrammar.getLQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getLQualifiedNameWithWildCardRule() {
		return getLQualifiedNameWithWildCardAccess().getRule();
	}

	//LFQN:
	//	ID ("." ID)*;
	public CommonGrammarGrammarAccess.LFQNElements getLFQNAccess() {
		return gaCommonGrammar.getLFQNAccess();
	}
	
	public ParserRule getLFQNRule() {
		return getLFQNAccess().getRule();
	}

	//ValidIDWithKeywords:
	//	"cachable" | "id" | "uuid" | "transient" | "version" | "derived" "collection" | "refers" | "settings" | "lazy" |
	//	"notnull" | "dto" | "date" | "mapto" | "ref" | "cascade" | "var" | ID;
	public CommonGrammarGrammarAccess.ValidIDWithKeywordsElements getValidIDWithKeywordsAccess() {
		return gaCommonGrammar.getValidIDWithKeywordsAccess();
	}
	
	public ParserRule getValidIDWithKeywordsRule() {
		return getValidIDWithKeywordsAccess().getRule();
	}

	//ValidLFQNWithKeywords:
	//	ValidIDWithKeywords ("." ValidIDWithKeywords)*;
	public CommonGrammarGrammarAccess.ValidLFQNWithKeywordsElements getValidLFQNWithKeywordsAccess() {
		return gaCommonGrammar.getValidLFQNWithKeywordsAccess();
	}
	
	public ParserRule getValidLFQNWithKeywordsRule() {
		return getValidLFQNWithKeywordsAccess().getRule();
	}

	//Multiplicity returns types::LMultiplicity:
	//	"[" lower=LowerBound (".." upper=UpperBound)? "]";
	public CommonGrammarGrammarAccess.MultiplicityElements getMultiplicityAccess() {
		return gaCommonGrammar.getMultiplicityAccess();
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//enum LowerBound returns types::LLowerBound:
	//	MANY="*" | ZERO="0" | OPTIONAL="?" | ATLEASTONE="+" | ONE="1";
	public CommonGrammarGrammarAccess.LowerBoundElements getLowerBoundAccess() {
		return gaCommonGrammar.getLowerBoundAccess();
	}
	
	public EnumRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}

	//enum UpperBound returns types::LUpperBound:
	//	MANY="*" | ONE="1";
	public CommonGrammarGrammarAccess.UpperBoundElements getUpperBoundAccess() {
		return gaCommonGrammar.getUpperBoundAccess();
	}
	
	public EnumRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}

	//LInt returns ecore::EInt:
	//	INT;
	public CommonGrammarGrammarAccess.LIntElements getLIntAccess() {
		return gaCommonGrammar.getLIntAccess();
	}
	
	public ParserRule getLIntRule() {
		return getLIntAccess().getRule();
	}

	//LDecimal returns ecore::EFloat:
	//	DECIMAL;
	public CommonGrammarGrammarAccess.LDecimalElements getLDecimalAccess() {
		return gaCommonGrammar.getLDecimalAccess();
	}
	
	public ParserRule getLDecimalRule() {
		return getLDecimalAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaCommonGrammar.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaCommonGrammar.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaCommonGrammar.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaCommonGrammar.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaCommonGrammar.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaCommonGrammar.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaCommonGrammar.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaCommonGrammar.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaCommonGrammar.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaCommonGrammar.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaCommonGrammar.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaCommonGrammar.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaCommonGrammar.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaCommonGrammar.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaCommonGrammar.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaCommonGrammar.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaCommonGrammar.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaCommonGrammar.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaCommonGrammar.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaCommonGrammar.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaCommonGrammar.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaCommonGrammar.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaCommonGrammar.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaCommonGrammar.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaCommonGrammar.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaCommonGrammar.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaCommonGrammar.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaCommonGrammar.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaCommonGrammar.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaCommonGrammar.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaCommonGrammar.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaCommonGrammar.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaCommonGrammar.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaCommonGrammar.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaCommonGrammar.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaCommonGrammar.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaCommonGrammar.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaCommonGrammar.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaCommonGrammar.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaCommonGrammar.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaCommonGrammar.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaCommonGrammar.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaCommonGrammar.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaCommonGrammar.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaCommonGrammar.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaCommonGrammar.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaCommonGrammar.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaCommonGrammar.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaCommonGrammar.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaCommonGrammar.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaCommonGrammar.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaCommonGrammar.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaCommonGrammar.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaCommonGrammar.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaCommonGrammar.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaCommonGrammar.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaCommonGrammar.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaCommonGrammar.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaCommonGrammar.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaCommonGrammar.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaCommonGrammar.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaCommonGrammar.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaCommonGrammar.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaCommonGrammar.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommonGrammar.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaCommonGrammar.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaCommonGrammar.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaCommonGrammar.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaCommonGrammar.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaCommonGrammar.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaCommonGrammar.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaCommonGrammar.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaCommonGrammar.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaCommonGrammar.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaCommonGrammar.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaCommonGrammar.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaCommonGrammar.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaCommonGrammar.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaCommonGrammar.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaCommonGrammar.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaCommonGrammar.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaCommonGrammar.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaCommonGrammar.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaCommonGrammar.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaCommonGrammar.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaCommonGrammar.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommonGrammar.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaCommonGrammar.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommonGrammar.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommonGrammar.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommonGrammar.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommonGrammar.getANY_OTHERRule();
	} 
}
