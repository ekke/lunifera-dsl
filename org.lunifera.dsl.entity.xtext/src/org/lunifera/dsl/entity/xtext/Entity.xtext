/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * IP: ideas, code and semantics also used from Xbase, Xcore and Xtend projects
 * 
 * Contributors:
 *    	Hans Georg GlÃ¶ckler - initial implementation
 * 		Florian Pirchner - Xbase integration
 *      Robert Handschmann - v2
 */
grammar org.lunifera.dsl.entity.xtext.EntityGrammar with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.lunifera.org/dsl/common/types/v1"
import "http://www.lunifera.org/dsl/entity/v1" as entity
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

LEntityModel returns entity::LEntityModel:
	packages+=LTypedPackage*;

LTypedPackage:
	{LTypedPackage}
	'package' name=QualifiedName ('{'
	(imports+=LImport)*
	(types+=LType)*
	'}')?;

LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard ';';

LDataType:
	'datatype' name=ID
	'jvmType' jvmTypeReference=JvmTypeReference ';';

LScalarType:
	LDataType | LEnum;

LType:
	LScalarType | Class;

Class returns LClass:
	{LClass} annotations+=LAnnotationDef*
	({entity::LEntity.annotationInfo=current}
	(abstract?='abstract')?
	'entity' name=ValidIDWithKeywords ('extends' superType=[entity::LEntity])?
	'{'
	features+=LEntityFeature*
	'}'
	|
	{entity::LBean.annotationInfo=current}
	'bean' name=ValidIDWithKeywords ('extends' superType=[entity::LBean])?
	'{'
	features+=LBeanFeature*
	'}');

LEntityFeature returns entity::LEntityFeature:
	{entity::LEntityFeature}
	annotations+=LAnnotationDef*
	(({entity::LEntityReference.annotationInfo=current}
	('ref' (cascading?='cascade')? type=[entity::LEntity] multiplicity=LMultiplicity? name=ValidIDWithKeywords
	('opposite' opposite=[entity::LEntityReference|LFQN])?)
	';')
	|
	({entity::LEntityAttribute.annotationInfo=current}
	(('transient' type=[LScalarType] name=ValidIDWithKeywords)
	|
	(('var' | id?='id' | version?="version") type=[LScalarType] multiplicity=LMultiplicity?
	name=ValidIDWithKeywords // TODO use the jvmTypeReference of LScalarType
	';')))
	|
	({entity::LOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression)));

LBeanFeature returns entity::LBeanFeature:
	{entity::LBeanFeature}
	annotations+=LAnnotationDef*
	(({entity::LBeanReference.annotationInfo=current}
	('ref' (cascading?='cascade')? type=[entity::LBean] multiplicity=LMultiplicity? name=ValidIDWithKeywords
	('opposite' opposite=[entity::LBeanReference|LFQN])?)
	';')
	|
	({entity::LBeanAttribute.annotationInfo=current}
	(('transient' type=[LScalarType] name=ValidIDWithKeywords)
	|
	(('var' | id?='id' | version?="version") type=[LScalarType] multiplicity=LMultiplicity?
	name=ValidIDWithKeywords
	';')))
	|
	({entity::LOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression)));

LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;

LEnum:
	'enum' name=ID
	('{'
	(literals+=LEnumLiteral ((',')? literals+=LEnumLiteral)*)?
	'}')?;

LEnumLiteral:
	name=ID;

LAnnotationDef:
	=> (annotation=XAnnotation);

enum LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

ValidIDWithKeywords:
	'cachable' | 'id' | 'transient' | 'version' |
	'collection' | 'refers' | 'settings' | 'lazy' |
	'notnull' |
	'entity' | 'bean' |
	ID;

LMultiplicity:
	'[' (lower=LLowerBound) ('..' upper=LUpperBound)? ']';

enum LLowerBound:
	MANY='*' | ZERO='0' | OPTIONAL='?' | ATLEASTONE='+' | ONE='1';

enum LUpperBound:
	MANY='*' | ONE='1';
	
