/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * IP: ideas, code and semantics also used from Xbase, Xcore and Xtend projects
 * 
 * Contributors:
 *    	Hans Georg Gl√∂ckler - initial implementation
 * 		Florian Pirchner - Xbase integration
 *      Robert Handschmann - v2
 */
grammar org.lunifera.dsl.entity.xtext.EntityGrammar with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.lunifera.org/dsl/entity/v1"
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

LEntityModel:
	(genSettings=LGenSettings)?
	packages+=LPackage*;

LPackage:
	{LPackage}
	'package' name=QualifiedName ('{'
		(imports+=LImport)*
		(compilers+=LCompilerType)*
		(types+=LType)*
	'}')?;

LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard;

LGenSettings:
	{LGenSettings}
	'generator settings' '{'
	((noSource?='no source')? &
	('compilerType=' compilerType=[LCompilerType|LFQN])? &
	(lifecycle?='checked lifecycle')? &
	(propertyChangeSupport?='add propertyChangeSupport')?)
	'}';

LCompilerType:
	'compiler' name=ID '{'
	('description:' description=STRING)?
	'}';

LDataType:
	'datatype' name=ID 
	'jvmType' jvmTypeReference=JvmTypeReference;

LScalarType:
	LDataType | LEnum;
LType:
    LScalarType | LClass;
 
LBeanProp:
    {LBeanProp}
    (annotations+=LAnnotationDef)*
    (('transient' jvmTypeRef=JvmTypeReference name=ValidIDWithKeywords) |
     ('var' type=[LScalarType] //('[' (lower=LowerBound) ('..' upper=UpperBound)? ']')?
      name=ValidIDWithKeywords
      ('=' defaultValueLiteral=STRING)? // TODO use the jvmTypeReference of LScalarType
      (notnull?='notnull')?) |     
     (collection?='collection' type=[LBean] name=ValidIDWithKeywords
      ('opposite' opposite=[LBeanProp|LFQN])?
      (composition?='composition')?) |
     ('refers' type=[LBean] name=ValidIDWithKeywords
      (notnull?='notnull')?
      ('opposite' opposite=[LBeanProp|LFQN])?
      (composition?='composition')?)
    );

LEntityProp:
    {LEntityProp}
    (annotations+=LAnnotationDef)*
    (('transient' jvmTypeRef=JvmTypeReference name=ValidIDWithKeywords) |
     ('var' type=[LScalarType] //('[' (lower=LowerBound) ('..' upper=UpperBound)? ']')?
      name=ValidIDWithKeywords
      ('=' defaultValueLiteral=STRING)? // TODO use the jvmTypeReference of LScalarType
      (notnull?='notnull')?) |     
     (collection?='collection' type=[LEntity] name=ValidIDWithKeywords
      ('opposite' opposite=[LEntityProp|LFQN])?
      (composition?='composition')?) |
     ('refers' type=[LEntity] name=ValidIDWithKeywords
      (notnull?='notnull')?
      ('opposite' opposite=[LEntityProp|LFQN])?
      (composition?='composition')?)
    );

LClass:
    LBean | LEntity;

LBean:
//    (annotations+=LAnnotationDef)*
    ((abstract?='abstract')? &
    (serializable?='serializable')?)
    'bean' name=ValidIDWithKeywords ('extends' superType=[LBean])? 
    '{' properties+=LBeanProp*
        operations+=LOperation* '}';

LEntity:
    (annotations+=LAnnotationDef)*
    (abstract?='abstract')?
	'entity' name=ValidIDWithKeywords ('extends' superType=[LClass])? 
	(historized?='historized')?
    '{' properties+=LEntityProp*
        operations+=LOperation* '}';

LOperation:
    (modifier=LModifier)?
    'def' type=JvmTypeReference name=ValidIDWithKeywords 
    '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' 
    body=XExpression;


LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;

LEnum:
	'enum' name=ID
	('{'
	(literals+=LEnumLiteral ((',')? literals+=LEnumLiteral)*)?
	'}')?;

LEnumLiteral:
	name=ID;

LAnnotationDef:
	(exclude?='exclude')? annotation=XAnnotation;

enum LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

ValidIDWithKeywords:
	'cachable' | 'id' | 'transient' | 'version' |
	'collection' | 'refers' | 'settings' | 'lazy' |
	'notnull' | 
	'entity' | 'bean' | 
	ID;

enum LowerBound:
	MANY='*' | OPTIONAL='?' | ATLEASTONE='+' | ZERO='0' | ONE='1';

enum UpperBound:
	MANY='*' | ONE='1';
	
