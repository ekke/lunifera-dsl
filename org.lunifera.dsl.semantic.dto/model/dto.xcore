@GenModel(fileExtensions="dtos")
@GenModel(modelName="DTO")
@GenModel(prefix="LunDto")
@GenModel(runtimeVersion="2.9")
@GenModel(copyrightText="Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 http://www.eclipse.org/legal/epl-v10.html 

 Based on ideas from Xtext, Xtend, Xcore
   
 Contributors:  
 		Florian Pirchner - Initial implementation 
 ")
@GenModel(operationReflection="false")
@Ecore(nsURI="http://www.lunifera.org/dsl/dto/v1")
@Ecore(nsPrefix="dto")
@Ecore(rootPackage="dto")
package org.lunifera.dsl.semantic.dto

import GenModel
import org.lunifera.dsl.semantic.common.types.LTypedPackage
import org.lunifera.dsl.semantic.common.types.LClass
import org.lunifera.dsl.semantic.common.types.LScalarType
import org.lunifera.dsl.semantic.common.types.LFeature
import org.lunifera.dsl.semantic.common.types.LAttribute
import org.lunifera.dsl.semantic.common.types.LReference
import org.eclipse.xtext.xbase.XExpression
import org.lunifera.dsl.semantic.common.types.LType
import java.util.List
import org.lunifera.dsl.semantic.common.types.FeaturesList
import org.lunifera.dsl.semantic.common.types.LFeaturesHolder
import org.lunifera.dsl.semantic.entity.LEntityReference
import org.lunifera.dsl.semantic.entity.LEntityAttribute
import org.lunifera.dsl.semantic.entity.LEntity
import org.lunifera.dsl.semantic.common.types.LMultiplicity
import org.eclipse.xtext.xbase.XStringLiteral

class LDtoModel {
	contains LTypedPackage[] packages
}

/**
 * A bean is an embeddable element that may become added to a entity using the @embedd annotation. 
 */
class LDto extends LClass, LFeaturesHolder, LScalarType {
	contains LDtoFeature[] features
	refers local LDto superType opposite subTypes
	refers transient LDto[] subTypes opposite superType
	refers LType wrappedType
	/** 
 	 * Returns all features of type LOperation
 	 */
	op OperationsList getOperations() {
		features.filter(typeof(LDtoOperation)).toList
	}
	/**
 	 * Returns all features of type LDtoReference
 	 */
	op DtoReferenceList getReferences() {
		features.filter(typeof(LDtoReference)).toList
	}
	
	/**
 	 * Returns all features of type LDtoAttribute
 	 */
	op DtoAttributeList getAttributes() {
		features.filter(typeof(LDtoAttribute)).toList
	}
	/**
	 * Returns all features of the holder and from super types
	 */
	op FeaturesList getAllFeatures() {
		val List<LDtoFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result
	}
	
	op void collectAllLunFeatures(LDto current, DtoFeatureList result) {
		if (current == null) {
			return
		}

		// collect from current feature
		result.addAll(current.features)

		// call for super class
		current.superType.collectAllLunFeatures(result)
	}
}

class LAutoInheritDto extends LDto {
	
}

class LDtoMapper {
	contains XExpression toDTO
	contains XExpression fromDTO
}

class LDtoFeature extends LFeature {
	contains LDtoMapper mapper
	op LDto getDTO() {
//		if (eContainer instanceof LFeature) {
//			return null // this happens since the feature may be the annotation info 
//		}

		return eContainer as LDto
	}
}

abstract class LDtoAbstractAttribute extends LDtoFeature, LAttribute {
}

class LDtoInheritedAttribute extends LDtoAbstractAttribute{
	refers LAttribute inheritedFeature
	op LScalarType getInheritedType() {
		return inheritedFeature.^type
	}
	op LMultiplicity getInheritedMultiplicity() {
		return inheritedFeature.multiplicity
	}
}
  
class LDtoAttribute  extends LDtoAbstractAttribute {
}

abstract class LDtoAbstractReference extends LDtoFeature, LReference {
	refers LDto ^type
}

class LDtoInheritedReference extends LDtoAbstractReference{
	refers LReference inheritedFeature
	op LMultiplicity getInheritedMultiplicity() {
		return inheritedFeature.multiplicity
	}
}

class LDtoReference  extends LDtoAbstractReference {
	refers LDtoReference ^opposite
}

class LDtoOperation extends org.lunifera.dsl.semantic.common.types.LOperation, LDtoFeature {
}
 
type DtoFeatureList wraps java.util.List<LDtoFeature>

type OperationsList wraps java.util.List<LDtoOperation>

type DtoReferenceList wraps java.util.List<LDtoReference>

type DtoAttributeList wraps java.util.List<LDtoAttribute>

type DtoAbstractAttributeList wraps java.util.List<LDtoAbstractAttribute>

	
	
	
	
	