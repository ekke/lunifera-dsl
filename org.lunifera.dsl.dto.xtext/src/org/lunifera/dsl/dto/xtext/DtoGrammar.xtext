grammar org.lunifera.dsl.dto.xtext.DtoGrammar with org.lunifera.dsl.common.xtext.CommonGrammar

import "http://www.lunifera.org/dsl/dto/v1" as dto
import "http://www.lunifera.org/dsl/common/types/v1"
import "http://www.lunifera.org/dsl/entity/v1" as entity
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
 
LDTOModel returns dto::LDtoModel:
	packages+=LTypedPackage*;

Class returns LClass:
	{LClass} annotations+=LAnnotationDef*
	{dto::LDto.annotationInfo=current}
	'dto' name=ValidIDWithKeywords ('extends' superType=[dto::LDto])? ('wraps' wrappedType=[LType])?
	'{'
	features+=LDtoFeature*
	'}';

LDtoFeature returns dto::LDtoFeature:
	{dto::LDtoFeature}
	annotations+=LAnnotationDef*
	(({dto::LDtoReference.annotationInfo=current}
	('ref' (cascading?='cascade')? type=[dto::LDto] multiplicity=LMultiplicity? name=ValidIDWithKeywords
	('opposite' opposite=[dto::LDtoReference|LFQN])?)
	';')
	|
	({dto::LDtoAttribute.annotationInfo=current}
	(('transient' type=[LScalarType] name=ValidIDWithKeywords)
	|
	(('var' | id?='id' | version?="version") type=[LScalarType] multiplicity=LMultiplicity?
	name=ValidIDWithKeywords
	';')))
	|
	({dto::LDtoOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression))
	|
	({dto::LDtoWrappedReference.annotationInfo=current}
	('uses' feature=[LFeature]
	('as' asType=[LScalarType]
	(('toDTO' convertToDTO=XBlockExpression) &
	('fromDTO' convertFromDTO=XBlockExpression)))?)
	';'));


