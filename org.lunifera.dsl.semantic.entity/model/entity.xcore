@GenModel(fileExtensions="entitymodel")
@GenModel(modelName="Entity")
@GenModel(prefix="Entity")
@Ecore(nsURI="http://www.lunifera.org/dsl/entity/v1")
@Ecore(nsPrefix="entity")
@Ecore(rootPackage="entity")
package org.lunifera.dsl.semantic.entity

import org.lunifera.dsl.semantic.common.types.*
import org.lunifera.dsl.semantic.common.types.LTypedPackage
import org.lunifera.dsl.semantic.common.types.LClass
import org.lunifera.dsl.semantic.common.types.LScalarType
import org.lunifera.dsl.semantic.common.types.LFeaturesHolder
import org.lunifera.dsl.semantic.common.types.LFeature
import org.lunifera.dsl.semantic.common.types.LAttribute
import org.lunifera.dsl.semantic.common.types.LReference
import java.util.List
import GenModel

class LEntityModel {
	contains LTypedPackage[] packages
}

/**
 * A bean is an embeddable element that may become added to a entity using the @embedd annotation. 
 */
class LBean extends LClass, LScalarType, LFeaturesHolder {
	contains LBeanFeature[] features
	refers local LBean superType opposite subTypes
	refers transient LBean[] subTypes opposite superType
	/**
 	 * Returns all features of type LOperation
 	 */
	op OperationsList getOperations() {
		features.filter(typeof(LOperation)).toList
	}
	/**
 	 * Returns all features of type LBeanReference
 	 */
	op BeanReferenceList getReferences() {
		features.filter(typeof(LBeanReference)).toList
	}
	/**
 	 * Returns all features of type LBeanAttribute
 	 */
	op BeanAttributeList getAttributes() {
		features.filter(typeof(LBeanAttribute)).toList
	}
	/**
	 * Returns all features of the holder and from super types
	 */
	op BeanFeatureList getAllFeatures() {
		val List<LBeanFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result
	}
	
		/**
	 * Returns all attributes of the holder and from super types
	 */
	op BeanAttributeList getAllAttributes() {
		val List<LBeanFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result.filter(typeof(LBeanAttribute)).toList
	}
	
	/**
	 * Returns all references of the holder and from super types
	 */
	op BeanReferenceList getAllReferences() {
		val List<LBeanFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result.filter(typeof(LBeanReference)).toList
	}
	
	op void collectAllLunFeatures(LBean current, BeanFeatureList result) {
		if (current == null) {
			return
		}

		// collect from current feature
		result.addAll(current.features)

		// call for super class
		current.superType.collectAllLunFeatures(result)
	}
}

/**
 * Represents a JPA entity.
 */
class LEntity extends LClass, LFeaturesHolder {
	boolean cacheable
	boolean historized
	boolean mappedSuperclass
	contains LEntityPersistenceInfo persistenceInfo
	contains LEntityInheritanceStrategy inheritanceStrategy
	contains LEntityFeature[] features
	contains LIndex[] indexes
	refers local LEntity superType opposite subTypes
	refers transient LEntity[] subTypes opposite superType
	/**
 	 * Returns all features of type LOperation
 	 */
	op OperationsList getOperations() {
		features.filter(typeof(LOperation)).toList
	}
	/**
 	 * Returns all features of type LEntityReference
 	 */
	op EntityReferenceList getReferences() {
		features.filter(typeof(LEntityReference)).toList
	}
	/**
 	 * Returns all features of type LEntityAttribute
 	 */
	op EntityAttributeList getAttributes() {
		features.filter(typeof(LEntityAttribute)).toList
	}
	/**
	 * Returns all features of the holder and from super types
	 */
	op EntityFeatureList getAllFeatures() {
		val List<LEntityFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result
	}
	
	/**
	 * Returns all attributes of the holder and from super types
	 */
	op EntityAttributeList getAllAttributes() {
		val List<LEntityFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result.filter(typeof(LEntityAttribute)).toList
	}
	
	/**
	 * Returns all references of the holder and from super types
	 */
	op EntityReferenceList getAllReferences() {
		val List<LEntityFeature> result = newArrayList()
		collectAllLunFeatures(result)
		return result.filter(typeof(LEntityReference)).toList
	}
	
	op void collectAllLunFeatures(LEntity current, EntityFeatureList result) {
		if (current == null) {
			return
		}

		// collect from current feature
		result.addAll(current.features)

		// call for super class
		current.superType.collectAllLunFeatures(result)
	}
}

class LEntityPersistenceInfo {
	String schemaName
	String tableName
}

class LEntityColumnPersistenceInfo {
	String columnName
}

interface LEntityInheritanceStrategy {
	
}

class LTablePerClassStrategy extends LEntityInheritanceStrategy {
	String discriminatorColumn
	LDiscriminatorType discriminatorType
	String discriminatorValue
}

class LTablePerSubclassStrategy extends LEntityInheritanceStrategy {
	String discriminatorColumn
	LDiscriminatorType discriminatorType
	String discriminatorValue
}

enum LDiscriminatorType {
	INHERIT, STRING, CHAR, INTEGER
}

class LEntityFeature extends LFeature {
	
	contains LEntityColumnPersistenceInfo persistenceInfo
	
	op LEntity getEntity() {
		return eContainer as LEntity
	}
}

class LEntityAttribute extends LEntityFeature, LAttribute {
}

class LEntityReference extends LEntityFeature, LReference {
	refers LEntity ^type
	refers LEntityReference ^opposite
}

class LBeanFeature  extends LFeature {
	op LBean getBean() {
		return eContainer as LBean
	}
}

class LBeanAttribute extends LBeanFeature, LAttribute {
}

class LBeanReference extends LBeanFeature, LReference {
	refers LBean ^type
	refers LBeanReference ^opposite
}

class LIndex {
	boolean ^unique
	String name
	refers LEntityFeature[] features
}

/**
 * Overwrites LOperation to add bean and entity feature as supertype
 */
class LOperation extends org.lunifera.dsl.semantic.common.types.LOperation, LBeanFeature, LEntityFeature {
}

type OperationsList wraps java.util.List<LOperation>

type EntityFeatureList wraps java.util.List<LEntityFeature>

type EntityReferenceList wraps java.util.List<LEntityReference>

type EntityAttributeList wraps java.util.List<LEntityAttribute>

type BeanFeatureList wraps java.util.List<LBeanFeature>

type BeanReferenceList wraps java.util.List<LBeanReference>

type BeanAttributeList wraps java.util.List<LBeanAttribute>



	
	
	
	
	