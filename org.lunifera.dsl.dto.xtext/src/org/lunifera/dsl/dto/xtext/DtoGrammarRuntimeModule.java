/*
 * generated by Xtext
 */
package org.lunifera.dsl.dto.xtext;

import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer;
import org.lunifera.dsl.dto.xtext.jvmmodel.DtoGrammarJvmModelInferrer;
import org.lunifera.dsl.dto.xtext.scope.DtoImportedNamespaceAwareLocalScopeProvider;
import org.lunifera.dsl.dto.xtext.scope.DtoScopeProvider;
import org.lunifera.dsl.dto.xtext.valueconverter.DtoQualifiedNameProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class DtoGrammarRuntimeModule extends
		org.lunifera.dsl.dto.xtext.AbstractDtoGrammarRuntimeModule {

	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return DtoQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return DtoScopeProvider.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class)
				.annotatedWith(
						Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate"))
				.to(DtoImportedNamespaceAwareLocalScopeProvider.class);
	}

	@SuppressWarnings("restriction")
	public Class<? extends IJvmModelInferrer> bindIJvmModelInferrer() {
		return DtoGrammarJvmModelInferrer.class;
	}
}
