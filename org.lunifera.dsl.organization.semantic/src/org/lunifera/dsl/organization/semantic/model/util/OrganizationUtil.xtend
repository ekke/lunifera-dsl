/**
 * Copyright (c) 2011 - 2013, Committers of lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Florian Pirchner - Initial implementation
 */
package org.lunifera.dsl.organization.semantic.model.util

import java.util.List
import org.eclipse.emf.ecore.EObject
import org.lunifera.dsl.organization.semantic.model.OOrganization
import org.lunifera.dsl.organization.semantic.model.OUnit

class OrganizationUtil {
	
	/**
	 * Tries to find the organization for the given element.
	 * If no organization could be found then <code>null</code> will be returned.
	 */
	def OOrganization findOrganization(EObject element){
		if(element instanceof OOrganization){
			return element as OOrganization
		}
		val EObject parent = element.eContainer
		if(parent != null) {
			return parent.findOrganization
		}
		return null
	}

	/**
	 * Searchs for sub units of the given unit.
	 * If no sub units could be found then an empty list will be returned.
	 */
	def List<OUnit> findSubUnits(OUnit unit){
		val OOrganization org = unit.findOrganization
		if(org == null){
			return newArrayList()
		}
		return org.units.filter([
			it.parent == unit
		]).toList
	}
	
	/**
	 * Returns true if sub units of the given unit could be found.
	 */
	def boolean hasSubUnits(OUnit unit){
		val OOrganization org = unit.findOrganization
		if(org == null){
			return false
		}
		return org.units.exists([
			it.parent == unit
		])
	}
}