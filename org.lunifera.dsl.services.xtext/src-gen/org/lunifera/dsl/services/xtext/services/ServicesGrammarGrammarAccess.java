/*
* generated by Xtext
*/
package org.lunifera.dsl.services.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.lunifera.dsl.common.xtext.services.CommonGrammarGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ServicesGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LServiceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LServiceModel");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesTypedPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//LServiceModel returns service::LServiceModel:
		//	packages+=TypedPackage*;
		public ParserRule getRule() { return rule; }

		//packages+=TypedPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//TypedPackage
		public RuleCall getPackagesTypedPackageParserRuleCall_0() { return cPackagesTypedPackageParserRuleCall_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLDTOServiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationDefParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cLDTOServiceAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cDtoserviceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Keyword cPrimaryDtoKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cPrimaryDTOAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cPrimaryDTOLDtoCrossReference_6_0_1_0 = (CrossReference)cPrimaryDTOAssignment_6_0_1.eContents().get(0);
		private final RuleCall cPrimaryDTOLDtoIDTerminalRuleCall_6_0_1_0_1 = (RuleCall)cPrimaryDTOLDtoCrossReference_6_0_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Assignment cSupportedDTOsAssignment_6_1 = (Assignment)cUnorderedGroup_6.eContents().get(1);
		private final RuleCall cSupportedDTOsSupportedDTOCollectionParserRuleCall_6_1_0 = (RuleCall)cSupportedDTOsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class returns service::LDTOService:
		//	{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
		//	name=ValidIDWithKeywords "{" ("primary dto" primaryDTO=[dto::LDto] ";" & supportedDTOs=SupportedDTOCollection?) "}";
		public ParserRule getRule() { return rule; }

		//{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
		//name=ValidIDWithKeywords "{" ("primary dto" primaryDTO=[dto::LDto] ";" & supportedDTOs=SupportedDTOCollection?) "}"
		public Group getGroup() { return cGroup; }

		//{service::LDTOService}
		public Action getLDTOServiceAction_0() { return cLDTOServiceAction_0; }

		//annotations+=AnnotationDef*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationDef
		public RuleCall getAnnotationsAnnotationDefParserRuleCall_1_0() { return cAnnotationsAnnotationDefParserRuleCall_1_0; }

		//{service::LDTOService.annotationInfo=current}
		public Action getLDTOServiceAnnotationInfoAction_2() { return cLDTOServiceAnnotationInfoAction_2; }

		//"dtoservice"
		public Keyword getDtoserviceKeyword_3() { return cDtoserviceKeyword_3; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_4_0() { return cNameValidIDWithKeywordsParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"primary dto" primaryDTO=[dto::LDto] ";" & supportedDTOs=SupportedDTOCollection?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }

		//"primary dto" primaryDTO=[dto::LDto] ";"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"primary dto"
		public Keyword getPrimaryDtoKeyword_6_0_0() { return cPrimaryDtoKeyword_6_0_0; }

		//primaryDTO=[dto::LDto]
		public Assignment getPrimaryDTOAssignment_6_0_1() { return cPrimaryDTOAssignment_6_0_1; }

		//[dto::LDto]
		public CrossReference getPrimaryDTOLDtoCrossReference_6_0_1_0() { return cPrimaryDTOLDtoCrossReference_6_0_1_0; }

		//ID
		public RuleCall getPrimaryDTOLDtoIDTerminalRuleCall_6_0_1_0_1() { return cPrimaryDTOLDtoIDTerminalRuleCall_6_0_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_6_0_2() { return cSemicolonKeyword_6_0_2; }

		//supportedDTOs=SupportedDTOCollection?
		public Assignment getSupportedDTOsAssignment_6_1() { return cSupportedDTOsAssignment_6_1; }

		//SupportedDTOCollection
		public RuleCall getSupportedDTOsSupportedDTOCollectionParserRuleCall_6_1_0() { return cSupportedDTOsSupportedDTOCollectionParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SupportedDTOCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedDTOCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLSupportedDTOCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSupportedDTOsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSupportedDtosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSupportedDtosSupportedDTOParserRuleCall_3_0 = (RuleCall)cSupportedDtosAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SupportedDTOCollection returns service::LSupportedDTOCollection:
		//	{service::LSupportedDTOCollection} "supportedDTOs" "{" supportedDtos+=SupportedDTO* "}";
		public ParserRule getRule() { return rule; }

		//{service::LSupportedDTOCollection} "supportedDTOs" "{" supportedDtos+=SupportedDTO* "}"
		public Group getGroup() { return cGroup; }

		//{service::LSupportedDTOCollection}
		public Action getLSupportedDTOCollectionAction_0() { return cLSupportedDTOCollectionAction_0; }

		//"supportedDTOs"
		public Keyword getSupportedDTOsKeyword_1() { return cSupportedDTOsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//supportedDtos+=SupportedDTO*
		public Assignment getSupportedDtosAssignment_3() { return cSupportedDtosAssignment_3; }

		//SupportedDTO
		public RuleCall getSupportedDtosSupportedDTOParserRuleCall_3_0() { return cSupportedDtosSupportedDTOParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SupportedDTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedDTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDtoLDtoCrossReference_0_0 = (CrossReference)cDtoAssignment_0.eContents().get(0);
		private final RuleCall cDtoLDtoIDTerminalRuleCall_0_0_1 = (RuleCall)cDtoLDtoCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFiltersAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFiltersSupportedFilterAttributesParserRuleCall_1_0_0 = (RuleCall)cFiltersAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//SupportedDTO returns service::LSupportedDTO:
		//	dto=[dto::LDto] (filters=SupportedFilterAttributes | ";");
		public ParserRule getRule() { return rule; }

		//dto=[dto::LDto] (filters=SupportedFilterAttributes | ";")
		public Group getGroup() { return cGroup; }

		//dto=[dto::LDto]
		public Assignment getDtoAssignment_0() { return cDtoAssignment_0; }

		//[dto::LDto]
		public CrossReference getDtoLDtoCrossReference_0_0() { return cDtoLDtoCrossReference_0_0; }

		//ID
		public RuleCall getDtoLDtoIDTerminalRuleCall_0_0_1() { return cDtoLDtoIDTerminalRuleCall_0_0_1; }

		//filters=SupportedFilterAttributes | ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//filters=SupportedFilterAttributes
		public Assignment getFiltersAssignment_1_0() { return cFiltersAssignment_1_0; }

		//SupportedFilterAttributes
		public RuleCall getFiltersSupportedFilterAttributesParserRuleCall_1_0_0() { return cFiltersSupportedFilterAttributesParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class SupportedFilterAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedFilterAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFiltersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFilterFeaturesLDtoFeatureCrossReference_2_0 = (CrossReference)cFilterFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFilterFeaturesLDtoFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilterFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFilterFeaturesLDtoFeatureCrossReference_3_1_0 = (CrossReference)cFilterFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cFilterFeaturesLDtoFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SupportedFilterAttributes returns service::LSupportedFilters:
		//	"filters" "{" filterFeatures+=[dto::LDtoFeature|QualifiedName] ("," filterFeatures+=[dto::LDtoFeature|QualifiedName])*
		//	";" "}";
		public ParserRule getRule() { return rule; }

		//"filters" "{" filterFeatures+=[dto::LDtoFeature|QualifiedName] ("," filterFeatures+=[dto::LDtoFeature|QualifiedName])*
		//";" "}"
		public Group getGroup() { return cGroup; }

		//"filters"
		public Keyword getFiltersKeyword_0() { return cFiltersKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//filterFeatures+=[dto::LDtoFeature|QualifiedName]
		public Assignment getFilterFeaturesAssignment_2() { return cFilterFeaturesAssignment_2; }

		//[dto::LDtoFeature|QualifiedName]
		public CrossReference getFilterFeaturesLDtoFeatureCrossReference_2_0() { return cFilterFeaturesLDtoFeatureCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_2_0_1() { return cFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_2_0_1; }

		//("," filterFeatures+=[dto::LDtoFeature|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//filterFeatures+=[dto::LDtoFeature|QualifiedName]
		public Assignment getFilterFeaturesAssignment_3_1() { return cFilterFeaturesAssignment_3_1; }

		//[dto::LDtoFeature|QualifiedName]
		public CrossReference getFilterFeaturesLDtoFeatureCrossReference_3_1_0() { return cFilterFeaturesLDtoFeatureCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_3_1_0_1() { return cFilterFeaturesLDtoFeatureQualifiedNameParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private LServiceModelElements pLServiceModel;
	private ClassElements pClass;
	private SupportedDTOCollectionElements pSupportedDTOCollection;
	private SupportedDTOElements pSupportedDTO;
	private SupportedFilterAttributesElements pSupportedFilterAttributes;
	
	private final Grammar grammar;

	private CommonGrammarGrammarAccess gaCommonGrammar;

	@Inject
	public ServicesGrammarGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarGrammarAccess gaCommonGrammar) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommonGrammar = gaCommonGrammar;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.dsl.services.xtext.ServicesGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarGrammarAccess getCommonGrammarGrammarAccess() {
		return gaCommonGrammar;
	}

	
	//LServiceModel returns service::LServiceModel:
	//	packages+=TypedPackage*;
	public LServiceModelElements getLServiceModelAccess() {
		return (pLServiceModel != null) ? pLServiceModel : (pLServiceModel = new LServiceModelElements());
	}
	
	public ParserRule getLServiceModelRule() {
		return getLServiceModelAccess().getRule();
	}

	//Class returns service::LDTOService:
	//	{service::LDTOService} annotations+=AnnotationDef* {service::LDTOService.annotationInfo=current} "dtoservice"
	//	name=ValidIDWithKeywords "{" ("primary dto" primaryDTO=[dto::LDto] ";" & supportedDTOs=SupportedDTOCollection?) "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//SupportedDTOCollection returns service::LSupportedDTOCollection:
	//	{service::LSupportedDTOCollection} "supportedDTOs" "{" supportedDtos+=SupportedDTO* "}";
	public SupportedDTOCollectionElements getSupportedDTOCollectionAccess() {
		return (pSupportedDTOCollection != null) ? pSupportedDTOCollection : (pSupportedDTOCollection = new SupportedDTOCollectionElements());
	}
	
	public ParserRule getSupportedDTOCollectionRule() {
		return getSupportedDTOCollectionAccess().getRule();
	}

	//SupportedDTO returns service::LSupportedDTO:
	//	dto=[dto::LDto] (filters=SupportedFilterAttributes | ";");
	public SupportedDTOElements getSupportedDTOAccess() {
		return (pSupportedDTO != null) ? pSupportedDTO : (pSupportedDTO = new SupportedDTOElements());
	}
	
	public ParserRule getSupportedDTORule() {
		return getSupportedDTOAccess().getRule();
	}

	//SupportedFilterAttributes returns service::LSupportedFilters:
	//	"filters" "{" filterFeatures+=[dto::LDtoFeature|QualifiedName] ("," filterFeatures+=[dto::LDtoFeature|QualifiedName])*
	//	";" "}";
	public SupportedFilterAttributesElements getSupportedFilterAttributesAccess() {
		return (pSupportedFilterAttributes != null) ? pSupportedFilterAttributes : (pSupportedFilterAttributes = new SupportedFilterAttributesElements());
	}
	
	public ParserRule getSupportedFilterAttributesRule() {
		return getSupportedFilterAttributesAccess().getRule();
	}

	//TypedPackage returns types::LTypedPackage:
	//	{types::LTypedPackage} "package" name=QualifiedName ("{" imports+=Import* types+=Type* "}")?;
	public CommonGrammarGrammarAccess.TypedPackageElements getTypedPackageAccess() {
		return gaCommonGrammar.getTypedPackageAccess();
	}
	
	public ParserRule getTypedPackageRule() {
		return getTypedPackageAccess().getRule();
	}

	//Type returns types::LType:
	//	ScalarType | Class;
	public CommonGrammarGrammarAccess.TypeElements getTypeAccess() {
		return gaCommonGrammar.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Import returns types::LImport:
	//	"import" importedNamespace=LQualifiedNameWithWildCard ";";
	public CommonGrammarGrammarAccess.ImportElements getImportAccess() {
		return gaCommonGrammar.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//DataType returns types::LDataType:
	//	"datatype" name=ValidIDWithKeywords ("jvmType" jvmTypeReference=JvmTypeReference asPrimitive?="as primitive"? |
	//	date?="dateType" dateType=DateType | asBlob?="as blob") ";";
	public CommonGrammarGrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaCommonGrammar.getDataTypeAccess();
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum DateType returns types::LDateType:
	//	DATE="date" | TIME="time" | TIMESTAMP="timestamp";
	public CommonGrammarGrammarAccess.DateTypeElements getDateTypeAccess() {
		return gaCommonGrammar.getDateTypeAccess();
	}
	
	public EnumRule getDateTypeRule() {
		return getDateTypeAccess().getRule();
	}

	//ScalarType returns types::LScalarType:
	//	DataType | Enum;
	public CommonGrammarGrammarAccess.ScalarTypeElements getScalarTypeAccess() {
		return gaCommonGrammar.getScalarTypeAccess();
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	//Modifier returns types::LModifier:
	//	final?="final"? & static?="static"? & visibility=LVisibility;
	public CommonGrammarGrammarAccess.ModifierElements getModifierAccess() {
		return gaCommonGrammar.getModifierAccess();
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Enum returns types::LEnum:
	//	"enum" name=ID ("{" (literals+=EnumLiteral (","? literals+=EnumLiteral)*)? "}")?;
	public CommonGrammarGrammarAccess.EnumElements getEnumAccess() {
		return gaCommonGrammar.getEnumAccess();
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumLiteral returns types::LEnumLiteral:
	//	name=ID;
	public CommonGrammarGrammarAccess.EnumLiteralElements getEnumLiteralAccess() {
		return gaCommonGrammar.getEnumLiteralAccess();
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}

	//AnnotationDef returns types::LAnnotationDef:
	//	=> (annotation=XAnnotation);
	public CommonGrammarGrammarAccess.AnnotationDefElements getAnnotationDefAccess() {
		return gaCommonGrammar.getAnnotationDefAccess();
	}
	
	public ParserRule getAnnotationDefRule() {
		return getAnnotationDefAccess().getRule();
	}

	//enum LVisibility returns types::LVisibility:
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public CommonGrammarGrammarAccess.LVisibilityElements getLVisibilityAccess() {
		return gaCommonGrammar.getLVisibilityAccess();
	}
	
	public EnumRule getLVisibilityRule() {
		return getLVisibilityAccess().getRule();
	}

	//LQualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public CommonGrammarGrammarAccess.LQualifiedNameWithWildCardElements getLQualifiedNameWithWildCardAccess() {
		return gaCommonGrammar.getLQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getLQualifiedNameWithWildCardRule() {
		return getLQualifiedNameWithWildCardAccess().getRule();
	}

	//LFQN:
	//	ID ("." ID)*;
	public CommonGrammarGrammarAccess.LFQNElements getLFQNAccess() {
		return gaCommonGrammar.getLFQNAccess();
	}
	
	public ParserRule getLFQNRule() {
		return getLFQNAccess().getRule();
	}

	//ValidIDWithKeywords:
	//	"cachable" | "id" | "transient" | "version" | "collection" | "refers" | "settings" | "lazy" | "notnull" | "dto" |
	//	"date" | ID;
	public CommonGrammarGrammarAccess.ValidIDWithKeywordsElements getValidIDWithKeywordsAccess() {
		return gaCommonGrammar.getValidIDWithKeywordsAccess();
	}
	
	public ParserRule getValidIDWithKeywordsRule() {
		return getValidIDWithKeywordsAccess().getRule();
	}

	//Multiplicity returns types::LMultiplicity:
	//	"[" lower=LowerBound (".." upper=UpperBound)? "]";
	public CommonGrammarGrammarAccess.MultiplicityElements getMultiplicityAccess() {
		return gaCommonGrammar.getMultiplicityAccess();
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//enum LowerBound returns types::LLowerBound:
	//	MANY="*" | ZERO="0" | OPTIONAL="?" | ATLEASTONE="+" | ONE="1";
	public CommonGrammarGrammarAccess.LowerBoundElements getLowerBoundAccess() {
		return gaCommonGrammar.getLowerBoundAccess();
	}
	
	public EnumRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}

	//enum UpperBound returns types::LUpperBound:
	//	MANY="*" | ONE="1";
	public CommonGrammarGrammarAccess.UpperBoundElements getUpperBoundAccess() {
		return gaCommonGrammar.getUpperBoundAccess();
	}
	
	public EnumRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}

	//LInt returns ecore::EInt:
	//	INT;
	public CommonGrammarGrammarAccess.LIntElements getLIntAccess() {
		return gaCommonGrammar.getLIntAccess();
	}
	
	public ParserRule getLIntRule() {
		return getLIntAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaCommonGrammar.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaCommonGrammar.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | {xbase::XListLiteral} => ("#" "[" elements+=XAnnotation) ("," elements+=XAnnotation)* "]" | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaCommonGrammar.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaCommonGrammar.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaCommonGrammar.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaCommonGrammar.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaCommonGrammar.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaCommonGrammar.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaCommonGrammar.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaCommonGrammar.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaCommonGrammar.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaCommonGrammar.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaCommonGrammar.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaCommonGrammar.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaCommonGrammar.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaCommonGrammar.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaCommonGrammar.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaCommonGrammar.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaCommonGrammar.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaCommonGrammar.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaCommonGrammar.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaCommonGrammar.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaCommonGrammar.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaCommonGrammar.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaCommonGrammar.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaCommonGrammar.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaCommonGrammar.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaCommonGrammar.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaCommonGrammar.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaCommonGrammar.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaCommonGrammar.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaCommonGrammar.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaCommonGrammar.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaCommonGrammar.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaCommonGrammar.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaCommonGrammar.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaCommonGrammar.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaCommonGrammar.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaCommonGrammar.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaCommonGrammar.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaCommonGrammar.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaCommonGrammar.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaCommonGrammar.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaCommonGrammar.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaCommonGrammar.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaCommonGrammar.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaCommonGrammar.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaCommonGrammar.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaCommonGrammar.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaCommonGrammar.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaCommonGrammar.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaCommonGrammar.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaCommonGrammar.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaCommonGrammar.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaCommonGrammar.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaCommonGrammar.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaCommonGrammar.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaCommonGrammar.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommonGrammar.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaCommonGrammar.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaCommonGrammar.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaCommonGrammar.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaCommonGrammar.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaCommonGrammar.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaCommonGrammar.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaCommonGrammar.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaCommonGrammar.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaCommonGrammar.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaCommonGrammar.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaCommonGrammar.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaCommonGrammar.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaCommonGrammar.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaCommonGrammar.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaCommonGrammar.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaCommonGrammar.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaCommonGrammar.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaCommonGrammar.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaCommonGrammar.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommonGrammar.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCommonGrammar.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommonGrammar.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommonGrammar.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommonGrammar.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommonGrammar.getANY_OTHERRule();
	} 
}
