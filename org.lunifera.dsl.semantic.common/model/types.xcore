@GenModel(fileExtensions="typesmodel", editDirectory="/org.lunifera.dsl.semantic.common.edit/src", editorDirectory="/org.lunifera.dsl.semantic.common.editor/src", extensibleProviderFactory="true")
@GenModel(modelName="Types")
@GenModel(prefix="LunTypes")
@GenModel(copyrightText="Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 http://www.eclipse.org/legal/epl-v10.html 

 Based on ideas from Xtext, Xtend, Xcore
  
 Contributors:  
 		Florian Pirchner - Initial implementation 
 ")
@Ecore(nsURI="http://www.lunifera.org/dsl/common/types/v1")
@Ecore(nsPrefix="types")
@Ecore(rootPackage="types")
package org.lunifera.dsl.semantic.common.types

import xcore.lang.GenModel
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.common.types.JvmFormalParameter
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation
import org.eclipse.emf.ecore.EObject
import org.lunifera.dsl.xtext.lazyresolver.api.EcoreUtil3
import org.eclipse.emf.ecore.InternalEObject
import org.eclipse.xtext.xtype.XImportSection

class LCommonModel extends LLazyResolver {
	contains LTypedPackage[] packages
	
}

class LLazyResolver {
	op EObject eResolveProxy(InternalEObject proxy) {
		return EcoreUtil3.resolve(proxy, this.eResource().resourceSet);
	}
}

class LPackage extends LLazyResolver {
	String name
	contains LImport[] imports
}

class LTypedPackage extends LPackage {
	contains LType[] types
	
	op String getResourceSimpleName() {
		val resource = eResource
		if(resource == null){
			return ""
		}
		
		return resource.URI.lastSegment + " - " + name
	}
	
}

class LImport {
	String importedNamespace
}

class LType extends LAnnotationTarget {
	String name
	contains LAnnotationTarget annotationInfo
	/**
	 * Delegates the annotation request to the target element.
	 */
	op AnnotationList getResolvedAnnotations() {
		if (annotationInfo != null) {
			annotationInfo.annotations
		} else {
			annotations
		}
	}
}

class LAnnotationDef extends LLazyResolver {
	boolean exclude
	contains XAnnotation ^annotation
}

class LAnnotationTarget extends LLazyResolver {
	contains LAnnotationDef[] annotations
}

class LScalarType extends LType {
}

class LDataType extends LScalarType {
	contains JvmTypeReference jvmTypeReference
	boolean asPrimitive
	boolean date
	boolean asBlob
	int length
	LDateType dateType
	/**
	 * Attention: synthetic must only be used inside the same resource
	 */
	// is used to prepare datatypes during linking
	boolean syntheticFlag
	// defines what target type should be prepared by the synthetic datatype. May be any string.
	String syntheticSelector
	// is used to target a feature in the current entity
	refers LFeature syntheticTypeReference
	// used to target a feature in the current entity, but avoids resolving cross refernces too early.
	// for instance if the feature is contained in a superclass
	refers LType syntheticType
	
}

enum LDateType {
	DATE
	, TIME
	, TIMESTAMP
}

class LEnum extends LScalarType {
	contains LEnumLiteral[] literals
	
}

class LEnumLiteral extends LLazyResolver {
	String name
	
}

class LClass extends LType {
	boolean ^abstract
	boolean serializable
	String shortName
	
}

interface LFeaturesHolder {
	/**
	 * Returns the features of the holder
	 */
	op FeaturesList getFeatures()
	/**
	 * Returns all features of the holder and from super types
	 */
	op FeaturesList getAllFeatures()
}

interface LFeature extends LAnnotationTarget {
	String name
	contains LMultiplicity multiplicity
	contains LAnnotationTarget annotationInfo
	/**
	 * Delegates the annotation request to the target element.
	 */
	op AnnotationList getResolvedAnnotations() {
		if (annotationInfo != null) {
			annotationInfo.annotations
		} else {
			annotations
		}
	}
}

interface LReference extends LFeature {
	boolean lazy
	boolean cascading
}

interface LAttribute extends LFeature {
	boolean ^id
	boolean uuid
	boolean version
	boolean lazy
	boolean cascading
	boolean ^transient
	boolean ^derived
	/**
	 * The domainKey is a human readable value for a dto or entity
	 */
	boolean domainKey
	/**
	 * The domainKey is the human readable description for a dto or entity
	 */
	boolean domainDescription
	contains XExpression derivedGetterExpression
	refers LScalarType ^type
	contains transient JvmTypeReference typeJvm
}

class LOperation extends LAnnotationTarget {
	contains LModifier modifier
	contains JvmTypeReference ^type
	contains JvmFormalParameter[] params
	contains XExpression body
	/**
	 * Method to generalize naming conventions for annotation access
	 */
	op AnnotationList getResolvedAnnotations() {
		annotations
	}
	
}

class LModifier extends LLazyResolver {
	boolean final
	boolean ^static
	LVisibility visibility
}

enum LVisibility {
	PACKAGE = 0
	PRIVATE = 1
	PROTECTED = 2
	PUBLIC = 3
}

class LMultiplicity {
	LLowerBound lower
	LUpperBound upper
	derived String toMultiplicityString get {
		var result = new StringBuilder
		switch lower {
			case LLowerBound.NULL: {
				result.append = "0";
			}
			case LLowerBound.MANY: {
				result.append = "1";
			}
			case LLowerBound.OPTIONAL: {
				result.append = "0";
			}
			case LLowerBound.ATLEASTONE: {
				result.append = "1";
			}
			case LLowerBound.ZERO: {
				result.append = "0";
			}
			case LLowerBound.ONE: {
				result.append = "1";
			}
			default: {
				result.append = "undefined";

			}
		}
		result.append = ".."
		switch upper {
			case LUpperBound.NULL: {
				result.append = "0";
			}
			case LUpperBound.MANY: {
				result.append = "*";
			}
			case LUpperBound.ONE: {
				result.append = "1";
			}
			default: {
				result.append = "undefined"
			}
		}
		return result.toString
	}
}

enum LLowerBound {
	NULL = 0
	MANY = 1
	OPTIONAL = 2
	ATLEASTONE = 3
	ZERO = 4
	ONE = 5
}

enum LUpperBound {
	NULL = 0
	MANY = 1
	ONE = 2
}

class LConstraints extends LLazyResolver {
	contains LConstraint[*] constraints
}

interface LConstraint extends LLazyResolver{
	 
}

class LAttributeMatchingConstraint extends LConstraint {
	refers LAttribute attribute
	LComparatorType comparatorType
	String matchingValue
	refers LEnumLiteral matchingLiteral
}

enum LComparatorType {
	EQUALS as '=='
	GREATER as '>'
	LOWER as '<'
	GREATER_EQ as '>='
	LOWER_EQ as '<='
	NOT_EQ as '<>'
}

type OperationsList wraps java.util.List<LOperation>

type FeaturesList wraps java.util.List<? extends LFeature>

type AnnotationList wraps EList<LAnnotationDef>

type InternalEObject wraps InternalEObject
	
	
	
