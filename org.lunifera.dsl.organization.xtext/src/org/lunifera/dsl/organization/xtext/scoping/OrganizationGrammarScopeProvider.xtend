/**
 * Copyright (c) 2011 - 2013, Committers of lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Cristiano Gaviao - Initial implementation
 */
package org.lunifera.dsl.organization.xtext.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.ScopeBasedSelectable
import org.eclipse.xtext.scoping.impl.SelectableBasedScope
import org.lunifera.dsl.organization.semantic.model.Organization
import org.lunifera.dsl.organization.semantic.model.OrganizationPackage
import org.lunifera.dsl.organization.semantic.model.Partnership

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
class OrganizationGrammarScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_Partnership_company(Partnership context,
			EReference reference) {
		val IScope unfilteredScope = delegateGetScope(context, reference);
		val Organization orgNameToFix = (context.eContainer()
				.eContainer() as Organization);
 
		val IScope filtered = SelectableBasedScope::createScope(IScope::NULLSCOPE,
				new ScopeBasedSelectable(unfilteredScope),
				[IEObjectDescription input |
						var EObject eObject = input.getEObjectOrProxy();
						if (eObject.eIsProxy()) {
							eObject = EcoreUtil::resolve(eObject, context);
						}
						val boolean result = !eObject.equals(orgNameToFix);
						return result;
					], 
				OrganizationPackage::eINSTANCE.getOrganization(), true);

		return filtered;
	}
	
	def IScope scope_Partnership_responsible( Partnership context,
			EReference reference) {
		val IScope unfilteredScope = delegateGetScope(context, reference);
		val Organization orgNameToFix = (context.eContainer()
				.eContainer() as Organization);
		val IScope filtered = SelectableBasedScope::createScope(IScope::NULLSCOPE,
				new ScopeBasedSelectable(unfilteredScope),
				[IEObjectDescription input |
					var EObject eObject = input.getEObjectOrProxy();
						if (eObject.eIsProxy()) {
							eObject = EcoreUtil::resolve(eObject, context);
						}
						val boolean result = eObject.eContainer().eContainer()
								.equals(orgNameToFix);
						return result;
					], 
					OrganizationPackage::eINSTANCE.getWorker(), true);

		return filtered;
	}
	
}
