/*
 * generated by Xtext
 */
package org.lunifera.dsl.services.xtext;

import org.eclipse.xtext.formatting.IFormatter;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.generator.OutputConfigurationProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.scoping.batch.XbaseBatchScopeProvider;
import org.lunifera.dsl.services.xtext.extensions.ServicesTypesBuilder;
import org.lunifera.dsl.services.xtext.formatting.ServicesGrammarFormatter;
import org.lunifera.dsl.services.xtext.jvmmodel.ServicesGrammarJvmModelInferrer;
import org.lunifera.dsl.services.xtext.scope.ServicesBatchScopeProvider;
import org.lunifera.dsl.services.xtext.scope.ServicesImportedNamespaceAwareLocalScopeProvider;
import org.lunifera.dsl.services.xtext.scope.ServicesScopeProvider;
import org.lunifera.dsl.services.xtext.valueconverter.ServicesQualifiedNameProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class ServicesGrammarRuntimeModule extends
		org.lunifera.dsl.services.xtext.AbstractServicesGrammarRuntimeModule {

	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ServicesQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return ServicesScopeProvider.class;
	}

	@Override
	public Class<? extends XbaseBatchScopeProvider> bindXbaseBatchScopeProvider() {
		return ServicesBatchScopeProvider.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class)
				.annotatedWith(
						Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate"))
				.to(ServicesImportedNamespaceAwareLocalScopeProvider.class);
	}

	public Class<? extends IJvmModelInferrer> bindIJvmModelInferrer() {
		return ServicesGrammarJvmModelInferrer.class;
	}

	public Class<? extends IFormatter> bindIFormatter() {
		return ServicesGrammarFormatter.class;
	}

	// public Class<? extends
	// org.lunifera.dsl.common.xtext.jvmmodel.AnnotationCompiler>
	// bindAnnotationCompiler() {
	// return org.lunifera.dsl.services.xtext.jvmmodel.AnnotationCompiler.class;
	// }

	public Class<? extends org.lunifera.dsl.common.xtext.extensions.AnnotationExtension> bindAnnotationExtension() {
		return org.lunifera.dsl.services.xtext.extensions.AnnotationExtension.class;
	}

	public Class<? extends JvmTypesBuilder> bindJvmTypesBuilder() {
		return ServicesTypesBuilder.class;
	}

	public Class<? extends org.lunifera.dsl.common.xtext.extensions.ModelExtensions> bindModelExtensions() {
		return org.lunifera.dsl.services.xtext.extensions.ModelExtensions.class;
	}

	// public Class<? extends org.eclipse.xtext.generator.IGenerator>
	// bindIGenerator() {
	// return Generator.class;
	// }

	public Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
		return OutputConfigurationProvider.class;
	}

}
