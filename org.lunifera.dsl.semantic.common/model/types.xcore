@GenModel(fileExtensions="typesmodel")
@GenModel(modelName="Types")
@GenModel(prefix="LunTypes")
@GenModel(copyrightText="Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 http://www.eclipse.org/legal/epl-v10.html 

 Based on ideas from Xtext, Xtend, Xcore
  
 Contributors:  
 		Florian Pirchner - Initial implementation 
 ")
@Ecore(nsURI="http://www.lunifera.org/dsl/common/types/v1")
@Ecore(nsPrefix="types")
@Ecore(rootPackage="types")
package org.lunifera.dsl.semantic.common.types

import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.common.types.JvmFormalParameter
import GenModel 
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.xcore.lib.XcoreCollectionLiterals
import org.eclipse.emf.ecore.util.BasicInternalEList

class LPackage {
	String name
	contains LImport[] imports
}

class LTypedPackage extends LPackage {
	contains LType[] types
}

class LImport {
	String importedNamespace
}

class LType extends LAnnotationTarget {
	String name
	contains LAnnotationTarget annotationInfo
	/**
	 * Delegates the annotation request to the target element.
	 */
	op AnnotationList getResolvedAnnotations() {
		if (annotationInfo != null) {
			annotationInfo.annotations
		} else {
			annotations
		}
	}
}

class LAnnotationDef {
	boolean exclude
	contains XAnnotation ^annotation 
}

class LAnnotationTarget {
	contains LAnnotationDef[] annotations
}

class LScalarType extends LType {
}

class LDataType extends LScalarType {
	contains JvmTypeReference jvmTypeReference
	boolean asPrimitive
	boolean date
	boolean asBlob
	int length
	LDateType dateType
	/**
	 * Attention: synthetic must only be used inside the same resource
	 */
	// is used to prepare datatypes during linking
	boolean syntheticFlag
	String syntheticType
	// is used to target a feature in the current entity
	refers LFeature syntheticTypeReference
}

enum LDateType {
	DATE
	, TIME
	, TIMESTAMP
}

class LEnum extends LScalarType {
	contains LEnumLiteral[] literals
}

class LEnumLiteral {
	String name
}

class LClass extends LType {
	boolean ^abstract
	boolean serializable
	String shortName
}

interface LFeaturesHolder {
	/**
	 * Returns the features of the holder
	 */
	op FeaturesList getFeatures()
	/**
	 * Returns all features of the holder and from super types
	 */
	op FeaturesList getAllFeatures()
}

interface LFeature extends LAnnotationTarget {
	String name
	contains LMultiplicity multiplicity
	contains LAnnotationTarget annotationInfo
	/**
	 * Delegates the annotation request to the target element.
	 */
	op AnnotationList getResolvedAnnotations() {
		if (annotationInfo != null) {
			annotationInfo.annotations
		} else {
			annotations
		}
	}
}

interface LReference extends LFeature {
	boolean lazy
	boolean cascading
}

interface LAttribute extends LFeature {
	boolean ^id
	boolean version
	boolean lazy
	boolean cascading
	boolean ^transient
	refers LScalarType ^type
}

class LOperation extends LAnnotationTarget {
	contains LModifier modifier
	contains JvmTypeReference ^type
	contains JvmFormalParameter[] params
	contains XExpression body
	/**
	 * Method to generalize naming conventions for annotation access
	 */
	op AnnotationList getResolvedAnnotations() {
		annotations
	}
}

class LModifier {
	boolean final
	boolean ^static
	LVisibility visibility
}

enum LVisibility {
	PACKAGE = 0
	PRIVATE = 1
	PROTECTED = 2
	PUBLIC = 3
}

class LMultiplicity {
	LLowerBound lower
	LUpperBound upper
}

enum LLowerBound {
	NULL = 0
	MANY = 1
	OPTIONAL = 2
	ATLEASTONE = 3
	ZERO = 4
	ONE = 5
}

enum LUpperBound {
	NULL = 0
	MANY = 1
	ONE = 2
}

type OperationsList wraps java.util.List<LOperation>

type FeaturesList wraps java.util.List<? extends LFeature>

type AnnotationList wraps EList<LAnnotationDef>


	
	
	