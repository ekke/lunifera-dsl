/**
 * Copyright (c) 2011 - 2015, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *         Florian Pirchner - Initial implementation
 */
grammar org.lunifera.dsl.dto.xtext.DtoGrammar with org.lunifera.dsl.common.xtext.CommonGrammar

import "http://www.lunifera.org/dsl/dto/v1" as dto
import "http://www.lunifera.org/dsl/common/types/v1" as common
import "http://www.lunifera.org/dsl/entity/v1" as entity
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

LDTOModel returns dto::LDtoModel:
	packages+=TypedPackage*;

Class returns dto::LDto:
	{dto::LDto} annotations+=AnnotationDef*
	
	(({dto::LDto.annotationInfo=current}
	(abstract?='abstract')? 'dto' name=ValidIDWithKeywords ('extends' superType=[dto::LDto])? ('wraps' wrappedType=[entity::LEntity])?
	'{'
	features+=DtoFeature*
	'}')
	|
	({dto::LAutoInheritDto.annotationInfo=current}
	(abstract?='abstract')? 'autoDto' name=ValidIDWithKeywords ('extends' superType=[dto::LDto])? 'wraps' wrappedType=[entity::LEntity]
	'{'
	features+=DtoFeature*
	'}')
	)
	;

DtoFeature returns dto::LDtoFeature:
	{dto::LDtoFeature}
	annotations+=AnnotationDef*
	((({dto::LDtoInheritedAttribute.annotationInfo=current}
	'inherit var' inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ('mapto' type=[dto::LDto])? ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')? (mapper=DtoMapper
	| ';'))
	|
	({dto::LDtoInheritedReference.annotationInfo=current}
	('inherit ref' inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) 'mapto' type=[dto::LDto] ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')? (mapper=DtoMapper |
	';'))
	|
	({dto::LDtoAttribute.annotationInfo=current}
	(transient?='transient' type=[common::LScalarType] name=ValidIDWithKeywords ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')?';'))
	|
	({dto::LDtoAttribute.annotationInfo=current}
	(dirty?='dirty' type=[common::LScalarType] name=ValidIDWithKeywords ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')?';'))
	|
	({dto::LDtoAttribute.annotationInfo=current}
	(derived?='derived' (domainDescription?='domainDescription')? type=[common::LScalarType] name=ValidIDWithKeywords ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')? derivedGetterExpression=XBlockExpression))
	|
	({dto::LDtoAttribute.annotationInfo=current}
	(id?='id' | version?="version" | uuid?="uuid" | domainDescription?='domainDescription' | domainKey?='domainKey') type=[common::LScalarType] multiplicity=Multiplicity?
	name=ValidIDWithKeywords ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')?
	';')
	|
	({dto::LDtoReference.annotationInfo=current}
	('ref' ((cascading?='cascade')? & (lazy?='lazy')?) type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords 
	('opposite' opposite=[dto::LDtoReference|LFQN])? ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')?) 
	(mapper=LimitedMapperDtoMapper |
	';'))
	|
	({dto::LDtoAttribute.annotationInfo=current}
	'var' type=[common::LScalarType] multiplicity=Multiplicity?
	name=ValidIDWithKeywords ('properties' '(' properties+=KeyAndValue (',' properties+=KeyAndValue)* ')')? (mapper=LimitedMapperDtoMapper |
	';'))
	|
	({dto::LDtoOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (', ' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression)));

DtoMapper returns dto::LDtoMapper:
	'{' 'toDTO'
	toDTO=XExpression
	('fromDTO'
	fromDTO=XExpression)?
	'}';

	// custom vars and refs should not be mapped to entity. 
LimitedMapperDtoMapper returns dto::LDtoMapper:
	'{' 'toDTO'
	toDTO=XExpression
	'}';

RefFQN:
	ID ('.' ID)*;
