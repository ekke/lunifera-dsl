/**
 * Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg), Robert Handschmann (Vienna)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 * 		Florian Pirchner - Initial implementation
 * 		Robert Handschmann - V2
 */
grammar org.lunifera.dsl.entity.xtext.EntityGrammar with org.lunifera.dsl.common.xtext.CommonGrammar

import "http://www.lunifera.org/dsl/common/types/v1"
import "http://www.lunifera.org/dsl/entity/v1" as entity
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

EntityModel returns entity::LEntityModel:
	packages+=TypedPackage*;

Class returns LClass:
	{LClass} annotations+=AnnotationDef*
	({entity::LEntity.annotationInfo=current}
	((abstract?='abstract')? & 
	((historized?='historized')
		| 
	(timedependent?='timedependent' ('(' timedependentDateType=LHistorizedDateType ')')?)
	)? &
	(cacheable?="cacheable")?)
	'entity' name=ValidIDWithKeywords ('extends' superType=EntityTypeReference)?
	'{'
	(persistenceInfo=EntityPersistenceInfo)
	(inheritanceStrategy=EntityInheritanceStrategy)?
	features+=EntityFeature*
	
	(indexes+=Index)*
	'}'
	|
	{entity::LEntity.annotationInfo=current}
	mappedSuperclass?='mapped superclass' ('extends' superType=EntityTypeReference)?
	name=ValidIDWithKeywords
	'{'
	features+=EntityFeature*
	'}'
	|
	{entity::LBean.annotationInfo=current}
	'bean' name=ValidIDWithKeywords ('extends' superType=BeanTypeReference)?
	'{'
	features+=BeanFeature*
	'}');
	 
EntityTypeReference returns entity::LEntityTypeReference:
  type=[entity::LEntity|QualifiedName];

BeanTypeReference returns entity::LBeanTypeReference:
  type=[entity::LBean|QualifiedName];

Index returns entity::LIndex:
	(unique?='unique')? 'index' name=ID '{'
		features+=[entity::LEntityFeature] (', ' features+=[entity::LEntityFeature])*
	'}'
;

EntityPersistenceInfo returns entity::LEntityPersistenceInfo:
	{entity::LEntityPersistenceInfo}
	(('schemaName' schemaName=ValidIDWithKeywords ';')? &
	('tableName' tableName=ValidIDWithKeywords ';')?);

ColumnPersistenceInfo returns entity::LEntityColumnPersistenceInfo:
	{entity::LEntityColumnPersistenceInfo}
	'(' columnName=ValidIDWithKeywords ')';

EntityFeature returns entity::LEntityFeature:
	{entity::LEntityFeature}
	annotations+=AnnotationDef*
	(({entity::LEntityReference.annotationInfo=current}
	('ref' (cascading?='cascade')? type=EntityTypeReference multiplicity=Multiplicity? name=ValidIDWithKeywords
	(persistenceInfo=ColumnPersistenceInfo)?
	('opposite' opposite=[entity::LEntityReference|LFQN])?)
	';')
	|
	({entity::LEntityAttribute.annotationInfo=current}
	((transient?='transient' type=[LScalarType] name=ValidIDWithKeywords ';')
	|
	(derived?='derived' (domainDescription?='domainDescription')? type=[LScalarType] name=ValidIDWithKeywords derivedGetterExpression=XBlockExpression)
	|
	(('var' | id?='id' | uuid?='uuid' | version?="version" | domainDescription?='domainDescription' | domainKey?='domainKey') type=[LScalarType] multiplicity=Multiplicity?
	name=ValidIDWithKeywords (persistenceInfo=ColumnPersistenceInfo)?
	';')))
	|
	({entity::LOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (', ' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression)));

BeanFeature returns entity::LBeanFeature:
	{entity::LBeanFeature}
	annotations+=AnnotationDef*
	(({entity::LBeanReference.annotationInfo=current}
	('ref' (cascading?='cascade')? type=BeanTypeReference multiplicity=Multiplicity? name=ValidIDWithKeywords
	('opposite' opposite=[entity::LBeanReference|LFQN])?)
	';')
	|
	({entity::LBeanAttribute.annotationInfo=current}
	((transient?='transient' type=[LScalarType] name=ValidIDWithKeywords)
	|
	(('var' | id?='id' | version?="version") type=[LScalarType] multiplicity=Multiplicity?
	name=ValidIDWithKeywords
	';')))
	|
	({entity::LOperation.annotationInfo=current}
	('def' type=JvmTypeReference name=ValidIDWithKeywords
	'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
	body=XExpression)));

EntityInheritanceStrategy returns entity::LEntityInheritanceStrategy:
	TablePerClassStrategy | TablePerSubclassStrategy;

TablePerClassStrategy returns entity::LTablePerClassStrategy:
	{entity::LTablePerClassStrategy}
	'inheritance per class' '{'
	(('discriminatorColumn' discriminatorColumn=ValidIDWithKeywords ';')? & ('discriminatorType'
	discriminatorType=DiscriminatorType ';')? & ('discriminatorValue'
	discriminatorValue=ValidIDWithKeywords ';')?) '}';

TablePerSubclassStrategy returns entity::LTablePerSubclassStrategy:
	{entity::LTablePerSubclassStrategy} 'inheritance per subclass' '{'
	(('discriminatorColumn' discriminatorColumn=ValidIDWithKeywords ';')? & ('discriminatorType'
	discriminatorType=DiscriminatorType ';')? & ('discriminatorValue'
	discriminatorValue=ValidIDWithKeywords ';')?) '}';

enum DiscriminatorType returns entity::LDiscriminatorType:
	INHERIT="INHERIT" | STRING="STRING" | CHAR="CHAR" | INTEGER="INT";

enum LHistorizedDateType returns LDateType:
	DATE="DATE" | TIMESTAMP="TIMESTAMP";
  
	