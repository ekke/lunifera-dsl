/**
 * Copyright (c) 2011 - 2013, Committers of lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Cristiano Gaviao - Initial implementation
 */
package org.lunifera.dsl.organization.xtext.ui.outline

import com.google.inject.Inject
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EcoreFactory
import org.eclipse.emf.ecore.impl.EClassImpl
import org.eclipse.emf.ecore.impl.EReferenceImpl
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.lunifera.dsl.organization.semantic.model.OBusinessRole
import org.lunifera.dsl.organization.semantic.model.OGroup
import org.lunifera.dsl.organization.semantic.model.OOrganization
import org.lunifera.dsl.organization.semantic.model.OOrganizationModel
import org.lunifera.dsl.organization.semantic.model.OPerson
import org.lunifera.dsl.organization.semantic.model.OPersonRole
import org.lunifera.dsl.organization.semantic.model.OUnit
import org.lunifera.dsl.organization.semantic.model.OUnitRole
import org.lunifera.dsl.organization.semantic.model.OWorker
import org.lunifera.dsl.organization.semantic.model.OrganizationPackage
import org.lunifera.dsl.organization.semantic.model.util.OrganizationUtil

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class OrganizationGrammarOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Inject extension OrganizationUtil

	@Inject
	private IImageHelper imageHelper;

	EPackage syntheticPackage

	// persons group
	EClassImpl personGroupEClass
	EReferenceImpl personGroup_ParentReference

	// worker group
	EClassImpl workerGroupEClass
	EReferenceImpl workerGroup_ParentReference

	// unitRole group
	EClassImpl unitRoleGroupEClass
	EReferenceImpl unitRoleGroup_ParentReference

	// personRole group
	EClassImpl personRoleGroupEClass
	EReferenceImpl personRoleGroup_ParentReference

	new() {
		val EcoreFactory factory = EcoreFactory::eINSTANCE
		syntheticPackage = factory.createEPackage
		syntheticPackage.name = "synthetic"
		syntheticPackage.nsPrefix = "synthetic"
		syntheticPackage.nsURI = "http://www.lunifera.org/dsl/organization/synthetic"

		// persons group
		personGroupEClass = "Persons".createNodeClass(9000)
		syntheticPackage.EClassifiers += personGroupEClass
		personGroup_ParentReference = personGroupEClass.createParentReference

		// workers group
		workerGroupEClass = "Workers".createNodeClass(9001)
		syntheticPackage.EClassifiers += workerGroupEClass
		workerGroup_ParentReference = workerGroupEClass.createParentReference

		// unitRole group
		unitRoleGroupEClass = "UnitRoles".createNodeClass(9003)
		syntheticPackage.EClassifiers += unitRoleGroupEClass
		unitRoleGroup_ParentReference = unitRoleGroupEClass.createParentReference

		// partnerships group
		personRoleGroupEClass = "PersonRoles".createNodeClass(9004)
		syntheticPackage.EClassifiers += personRoleGroupEClass
		personRoleGroup_ParentReference = personRoleGroupEClass.createParentReference
	}

	def EReferenceImpl createParentReference(EClass owner) {
		val EReferenceImpl reference = EcoreFactory::eINSTANCE.createEReference() as EReferenceImpl;
		reference.setFeatureID(9000);
		owner.getEStructuralFeatures().add(reference);
		reference.EType = OrganizationPackage::eINSTANCE.OOrganization
		reference.name = "parent"
		reference.upperBound = 1
		return reference
	}

	def EClassImpl createNodeClass(String name, int id) {
		val EClassImpl eClass = EcoreFactory::eINSTANCE.createEClass() as EClassImpl
		eClass.classifierID = id
		eClass.name = name
		return eClass
	}

	/**
	 * Skip the root node.
	 * 
	 * @param parentNode
	 * @param model
	 */
	def void _createChildren(DocumentRootNode parentNode, OOrganizationModel model) {
		if (model.root != null) {
			createNode(parentNode, model.root);
		}

		val EObject personRoleGroup = syntheticPackage.EFactoryInstance.create(personRoleGroupEClass)
		personRoleGroup.eSet(personRoleGroup_ParentReference, model)
		new VirtualOutlineNode(personRoleGroup, parentNode, imageHelper.getImage("personroles.png"), "PersonRoles",
			model.personRoles.empty);

		val EObject unitRoleGroup = syntheticPackage.EFactoryInstance.create(unitRoleGroupEClass)
		unitRoleGroup.eSet(unitRoleGroup_ParentReference, model)
		new VirtualOutlineNode(unitRoleGroup, parentNode, imageHelper.getImage("unitroles.png"), "UnitRoles",
			model.unitRoles.empty);

	}

	def void _createChildren(IOutlineNode parentNode, OOrganization model) {
		for (OUnit unit : model.units.filter([it.parent == null])) {
			createNode(parentNode, unit);
		}

		val EObject personsGroup = syntheticPackage.EFactoryInstance.create(personGroupEClass)
		personsGroup.eSet(personGroup_ParentReference, model)
		new VirtualOutlineNode(personsGroup, parentNode, imageHelper.getImage("persons.png"), "Persons",
			model.persons.empty);

		val EObject workersGroup = syntheticPackage.EFactoryInstance.create(workerGroupEClass)
		workersGroup.eSet(workerGroup_ParentReference, model)
		new VirtualOutlineNode(workersGroup, parentNode, imageHelper.getImage("workers.png"), "Workers",
			model.workers.empty);

		for (OGroup group : model.groups) {
			createNode(parentNode, group);
		}
	}

	override void _createChildren(IOutlineNode parentNode, EObject eObject) {
		if (eObject.eClass == personGroupEClass) {
			val OOrganization organization = eObject.eGet(personGroup_ParentReference) as OOrganization
			for (OPerson person : organization.persons) {
				createNode(parentNode, person)
			}
		} else if (eObject.eClass == workerGroupEClass) {
			val OOrganization organization = eObject.eGet(workerGroup_ParentReference) as OOrganization
			for (OWorker worker : organization.workers) {
				createNode(parentNode, worker)
			}
		} else if (eObject.eClass == personRoleGroupEClass) {
			val OOrganizationModel model = eObject.eGet(personRoleGroup_ParentReference) as OOrganizationModel
			for (OPersonRole role : model.personRoles) {
				createNode(parentNode, role)
			}
		} else if (eObject.eClass == unitRoleGroupEClass) {
			val OOrganizationModel model = eObject.eGet(unitRoleGroup_ParentReference) as OOrganizationModel
			for (OUnitRole role : model.unitRoles) {
				createNode(parentNode, role)
			}
		} else {
			super._createChildren(parentNode, eObject)
		}
	}

	override boolean _isLeaf(EObject eObject) {
		switch (eObject.eClass) {
			case personGroupEClass: {
				val OOrganization organization = eObject.eGet(personGroup_ParentReference) as OOrganization
				return organization.persons.empty
			}
			case workerGroupEClass: {
				val OOrganization organization = eObject.eGet(workerGroup_ParentReference) as OOrganization
				return organization.workers.empty
			}
			case personRoleGroupEClass: {
				val OOrganizationModel model = eObject.eGet(personRoleGroup_ParentReference) as OOrganizationModel
				return model.personRoles.empty
			}
			case unitRoleGroupEClass: {
				val OOrganizationModel model = eObject.eGet(unitRoleGroup_ParentReference) as OOrganizationModel
				return model.unitRoles.empty
			}
		}

		return super._isLeaf(eObject)
	}

	def boolean _isLeaf(OUnit unit) {
		return !unit.hasSubUnits
	}

	def boolean _isLeaf(OGroup group) {
		return group.workers.empty
	}

	def void _createChildren(IOutlineNode parentNode, OUnit unit) {
		for (OUnit child : unit.findSubUnits) {
			createNode(parentNode, child);
		}
	}

	def void _createChildren(IOutlineNode parentNode, OGroup group) {
		for (OWorker child : group.workers) {
			createNode(parentNode, child);
		}
	}

	override Image _image(Object modelElement) {
		if (modelElement instanceof OPerson || modelElement instanceof OWorker || modelElement instanceof OBusinessRole) {
			return imageHelper.getImage("bullet_outline.png");
		}
		return super._image(modelElement);
	}
}
