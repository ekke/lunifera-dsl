/*
 * generated by Xtext
 */
package org.lunifera.dsl.dto.xtext.formatting;

import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.lunifera.dsl.common.xtext.formatting.CommonGrammarFormatter;
import org.lunifera.dsl.dto.xtext.services.DtoGrammarGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class DtoGrammarFormatter extends CommonGrammarFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		configure(c, (DtoGrammarGrammarAccess) getGrammarAccess());
	}

	public void configure(FormattingConfig c, DtoGrammarGrammarAccess ga) {
		DtoGrammarGrammarAccess f = (DtoGrammarGrammarAccess) getGrammarAccess();
		
		super.configure(c, ga.getCommonGrammarGrammarAccess());

		configureClassDef(c, f.getClassAccess());
		configureDtoFeature(c, f.getDtoFeatureAccess());
		configureDtoMapper(c, f.getDtoMapperAccess());
		configureLimitedMapperDtoMapper(c, f.getLimitedMapperDtoMapperAccess());
	}

	protected void configureClassDef(FormattingConfig c,
			DtoGrammarGrammarAccess.ClassElements ele) {
		c.setLinewrap().around(ele.getAnnotationsAssignment_1());
		c.setLinewrap().around(ele.getRule());

		c.setIndentationIncrement().after(
				ele.getLeftCurlyBracketKeyword_7());
		c.setIndentationDecrement().before(
				ele.getRightCurlyBracketKeyword_9());
		c.setLinewrap(2).after(ele.getRightCurlyBracketKeyword_9());
	}

	protected void configureDtoFeature(FormattingConfig c,
			DtoGrammarGrammarAccess.DtoFeatureElements ele) {
		c.setLinewrap().around(ele.getAnnotationsAssignment_1());

		//Setting for ";"
		c.setNoSpace().before(ele.getSemicolonKeyword_2_0_2_1());
		c.setNoSpace().before(ele.getSemicolonKeyword_2_1_4_1());
		c.setNoSpace().before(ele.getSemicolonKeyword_2_2_1_3());
		c.setNoSpace().before(ele.getSemicolonKeyword_2_4_5());
		c.setNoSpace().before(ele.getSemicolonKeyword_2_5_2_1());
		c.setNoSpace().before(ele.getSemicolonKeyword_2_6_5_1());
		
		c.setLinewrap(1, 1, 2).around(ele.getRule());
	}

	protected void configureDtoMapper(FormattingConfig c,
			DtoGrammarGrammarAccess.DtoMapperElements ele) {
		c.setLinewrap(1, 1, 2).after(ele.getRule());

		//Settings for "{" and "}"
		c.setIndentationIncrement().after(
				ele.getLeftCurlyBracketKeyword_0());
		c.setLinewrap().after(ele.getLeftCurlyBracketKeyword_0());
		
		c.setLinewrap(1).before(ele.getRightCurlyBracketKeyword_4());
		c.setIndentationDecrement().before(
				ele.getRightCurlyBracketKeyword_4());
		c.setLinewrap(1, 1, 2).after(ele.getRightCurlyBracketKeyword_4());
	}

	protected void configureLimitedMapperDtoMapper(FormattingConfig c,
			DtoGrammarGrammarAccess.LimitedMapperDtoMapperElements ele) {
		c.setLinewrap(1, 1, 2).around(ele.getRule());

		//Settings for "{" and "}"
		c.setIndentationIncrement().after(
				ele.getLeftCurlyBracketKeyword_0());
		c.setIndentationDecrement().before(
				ele.getRightCurlyBracketKeyword_3());
		c.setLinewrap(2).after(ele.getRightCurlyBracketKeyword_3());
	}


}
