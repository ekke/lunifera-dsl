/*
* generated by Xtext
*/
package org.lunifera.dsl.dto.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.lunifera.dsl.common.xtext.services.CommonGrammarGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DtoGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LDTOModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LDTOModel");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesTypedPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//LDTOModel returns dto::LDtoModel:
		//	packages+=TypedPackage*;
		public ParserRule getRule() { return rule; }

		//packages+=TypedPackage*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//TypedPackage
		public RuleCall getPackagesTypedPackageParserRuleCall_0() { return cPackagesTypedPackageParserRuleCall_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLDtoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationDefParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cLDtoAnnotationInfoAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Assignment cAbstractAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_2_0_1_0 = (Keyword)cAbstractAssignment_2_0_1.eContents().get(0);
		private final Keyword cDtoKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cNameAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_0_3_0 = (RuleCall)cNameAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Keyword cExtendsKeyword_2_0_4_0 = (Keyword)cGroup_2_0_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_0_4_1 = (Assignment)cGroup_2_0_4.eContents().get(1);
		private final CrossReference cSuperTypeLDtoCrossReference_2_0_4_1_0 = (CrossReference)cSuperTypeAssignment_2_0_4_1.eContents().get(0);
		private final RuleCall cSuperTypeLDtoIDTerminalRuleCall_2_0_4_1_0_1 = (RuleCall)cSuperTypeLDtoCrossReference_2_0_4_1_0.eContents().get(1);
		private final Group cGroup_2_0_5 = (Group)cGroup_2_0.eContents().get(5);
		private final Keyword cWrapsKeyword_2_0_5_0 = (Keyword)cGroup_2_0_5.eContents().get(0);
		private final Assignment cWrappedTypeAssignment_2_0_5_1 = (Assignment)cGroup_2_0_5.eContents().get(1);
		private final CrossReference cWrappedTypeLEntityCrossReference_2_0_5_1_0 = (CrossReference)cWrappedTypeAssignment_2_0_5_1.eContents().get(0);
		private final RuleCall cWrappedTypeLEntityIDTerminalRuleCall_2_0_5_1_0_1 = (RuleCall)cWrappedTypeLEntityCrossReference_2_0_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_0_6 = (Keyword)cGroup_2_0.eContents().get(6);
		private final Assignment cFeaturesAssignment_2_0_7 = (Assignment)cGroup_2_0.eContents().get(7);
		private final RuleCall cFeaturesDtoFeatureParserRuleCall_2_0_7_0 = (RuleCall)cFeaturesAssignment_2_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_8 = (Keyword)cGroup_2_0.eContents().get(8);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cLAutoInheritDtoAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_2_1_1_0 = (Keyword)cAbstractAssignment_2_1_1.eContents().get(0);
		private final Keyword cAutoDtoKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cNameAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_1_3_0 = (RuleCall)cNameAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cGroup_2_1.eContents().get(4);
		private final Keyword cExtendsKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final CrossReference cSuperTypeLDtoCrossReference_2_1_4_1_0 = (CrossReference)cSuperTypeAssignment_2_1_4_1.eContents().get(0);
		private final RuleCall cSuperTypeLDtoIDTerminalRuleCall_2_1_4_1_0_1 = (RuleCall)cSuperTypeLDtoCrossReference_2_1_4_1_0.eContents().get(1);
		private final Keyword cWrapsKeyword_2_1_5 = (Keyword)cGroup_2_1.eContents().get(5);
		private final Assignment cWrappedTypeAssignment_2_1_6 = (Assignment)cGroup_2_1.eContents().get(6);
		private final CrossReference cWrappedTypeLEntityCrossReference_2_1_6_0 = (CrossReference)cWrappedTypeAssignment_2_1_6.eContents().get(0);
		private final RuleCall cWrappedTypeLEntityIDTerminalRuleCall_2_1_6_0_1 = (RuleCall)cWrappedTypeLEntityCrossReference_2_1_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_7 = (Keyword)cGroup_2_1.eContents().get(7);
		private final Assignment cFeaturesAssignment_2_1_8 = (Assignment)cGroup_2_1.eContents().get(8);
		private final RuleCall cFeaturesDtoFeatureParserRuleCall_2_1_8_0 = (RuleCall)cFeaturesAssignment_2_1_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_9 = (Keyword)cGroup_2_1.eContents().get(9);
		
		//Class returns dto::LDto:
		//	{dto::LDto} annotations+=AnnotationDef* ({dto::LDto.annotationInfo=current} abstract?="abstract"? "dto"
		//	name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? ("wraps" wrappedType=[entity::LEntity])? "{"
		//	features+=DtoFeature* "}" | {dto::LAutoInheritDto.annotationInfo=current} abstract?="abstract"? "autoDto"
		//	name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? "wraps" wrappedType=[entity::LEntity] "{"
		//	features+=DtoFeature* "}");
		public ParserRule getRule() { return rule; }

		//{dto::LDto} annotations+=AnnotationDef* ({dto::LDto.annotationInfo=current} abstract?="abstract"? "dto"
		//name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? ("wraps" wrappedType=[entity::LEntity])? "{"
		//features+=DtoFeature* "}" | {dto::LAutoInheritDto.annotationInfo=current} abstract?="abstract"? "autoDto"
		//name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? "wraps" wrappedType=[entity::LEntity] "{"
		//features+=DtoFeature* "}")
		public Group getGroup() { return cGroup; }

		//{dto::LDto}
		public Action getLDtoAction_0() { return cLDtoAction_0; }

		//annotations+=AnnotationDef*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationDef
		public RuleCall getAnnotationsAnnotationDefParserRuleCall_1_0() { return cAnnotationsAnnotationDefParserRuleCall_1_0; }

		//{dto::LDto.annotationInfo=current} abstract?="abstract"? "dto" name=ValidIDWithKeywords ("extends"
		//superType=[dto::LDto])? ("wraps" wrappedType=[entity::LEntity])? "{" features+=DtoFeature* "}" |
		//{dto::LAutoInheritDto.annotationInfo=current} abstract?="abstract"? "autoDto" name=ValidIDWithKeywords ("extends"
		//superType=[dto::LDto])? "wraps" wrappedType=[entity::LEntity] "{" features+=DtoFeature* "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//{dto::LDto.annotationInfo=current} abstract?="abstract"? "dto" name=ValidIDWithKeywords ("extends"
		//superType=[dto::LDto])? ("wraps" wrappedType=[entity::LEntity])? "{" features+=DtoFeature* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{dto::LDto.annotationInfo=current}
		public Action getLDtoAnnotationInfoAction_2_0_0() { return cLDtoAnnotationInfoAction_2_0_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_2_0_1() { return cAbstractAssignment_2_0_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_2_0_1_0() { return cAbstractAbstractKeyword_2_0_1_0; }

		//"dto"
		public Keyword getDtoKeyword_2_0_2() { return cDtoKeyword_2_0_2; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_0_3() { return cNameAssignment_2_0_3; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_0_3_0() { return cNameValidIDWithKeywordsParserRuleCall_2_0_3_0; }

		//("extends" superType=[dto::LDto])?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_4_0() { return cExtendsKeyword_2_0_4_0; }

		//superType=[dto::LDto]
		public Assignment getSuperTypeAssignment_2_0_4_1() { return cSuperTypeAssignment_2_0_4_1; }

		//[dto::LDto]
		public CrossReference getSuperTypeLDtoCrossReference_2_0_4_1_0() { return cSuperTypeLDtoCrossReference_2_0_4_1_0; }

		//ID
		public RuleCall getSuperTypeLDtoIDTerminalRuleCall_2_0_4_1_0_1() { return cSuperTypeLDtoIDTerminalRuleCall_2_0_4_1_0_1; }

		//("wraps" wrappedType=[entity::LEntity])?
		public Group getGroup_2_0_5() { return cGroup_2_0_5; }

		//"wraps"
		public Keyword getWrapsKeyword_2_0_5_0() { return cWrapsKeyword_2_0_5_0; }

		//wrappedType=[entity::LEntity]
		public Assignment getWrappedTypeAssignment_2_0_5_1() { return cWrappedTypeAssignment_2_0_5_1; }

		//[entity::LEntity]
		public CrossReference getWrappedTypeLEntityCrossReference_2_0_5_1_0() { return cWrappedTypeLEntityCrossReference_2_0_5_1_0; }

		//ID
		public RuleCall getWrappedTypeLEntityIDTerminalRuleCall_2_0_5_1_0_1() { return cWrappedTypeLEntityIDTerminalRuleCall_2_0_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_6() { return cLeftCurlyBracketKeyword_2_0_6; }

		//features+=DtoFeature*
		public Assignment getFeaturesAssignment_2_0_7() { return cFeaturesAssignment_2_0_7; }

		//DtoFeature
		public RuleCall getFeaturesDtoFeatureParserRuleCall_2_0_7_0() { return cFeaturesDtoFeatureParserRuleCall_2_0_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_8() { return cRightCurlyBracketKeyword_2_0_8; }

		//{dto::LAutoInheritDto.annotationInfo=current} abstract?="abstract"? "autoDto" name=ValidIDWithKeywords ("extends"
		//superType=[dto::LDto])? "wraps" wrappedType=[entity::LEntity] "{" features+=DtoFeature* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{dto::LAutoInheritDto.annotationInfo=current}
		public Action getLAutoInheritDtoAnnotationInfoAction_2_1_0() { return cLAutoInheritDtoAnnotationInfoAction_2_1_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_2_1_1() { return cAbstractAssignment_2_1_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_2_1_1_0() { return cAbstractAbstractKeyword_2_1_1_0; }

		//"autoDto"
		public Keyword getAutoDtoKeyword_2_1_2() { return cAutoDtoKeyword_2_1_2; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_1_3() { return cNameAssignment_2_1_3; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_1_3_0() { return cNameValidIDWithKeywordsParserRuleCall_2_1_3_0; }

		//("extends" superType=[dto::LDto])?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//"extends"
		public Keyword getExtendsKeyword_2_1_4_0() { return cExtendsKeyword_2_1_4_0; }

		//superType=[dto::LDto]
		public Assignment getSuperTypeAssignment_2_1_4_1() { return cSuperTypeAssignment_2_1_4_1; }

		//[dto::LDto]
		public CrossReference getSuperTypeLDtoCrossReference_2_1_4_1_0() { return cSuperTypeLDtoCrossReference_2_1_4_1_0; }

		//ID
		public RuleCall getSuperTypeLDtoIDTerminalRuleCall_2_1_4_1_0_1() { return cSuperTypeLDtoIDTerminalRuleCall_2_1_4_1_0_1; }

		//"wraps"
		public Keyword getWrapsKeyword_2_1_5() { return cWrapsKeyword_2_1_5; }

		//wrappedType=[entity::LEntity]
		public Assignment getWrappedTypeAssignment_2_1_6() { return cWrappedTypeAssignment_2_1_6; }

		//[entity::LEntity]
		public CrossReference getWrappedTypeLEntityCrossReference_2_1_6_0() { return cWrappedTypeLEntityCrossReference_2_1_6_0; }

		//ID
		public RuleCall getWrappedTypeLEntityIDTerminalRuleCall_2_1_6_0_1() { return cWrappedTypeLEntityIDTerminalRuleCall_2_1_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_7() { return cLeftCurlyBracketKeyword_2_1_7; }

		//features+=DtoFeature*
		public Assignment getFeaturesAssignment_2_1_8() { return cFeaturesAssignment_2_1_8; }

		//DtoFeature
		public RuleCall getFeaturesDtoFeatureParserRuleCall_2_1_8_0() { return cFeaturesDtoFeatureParserRuleCall_2_1_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_9() { return cRightCurlyBracketKeyword_2_1_9; }
	}

	public class DtoFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DtoFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLDtoFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationDefParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Action cLDtoInheritedAttributeAnnotationInfoAction_2_0_0_0 = (Action)cGroup_2_0_0.eContents().get(0);
		private final Keyword cInheritVarKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cInheritedFeatureAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final CrossReference cInheritedFeatureLEntityAttributeCrossReference_2_0_0_2_0 = (CrossReference)cInheritedFeatureAssignment_2_0_0_2.eContents().get(0);
		private final RuleCall cInheritedFeatureLEntityAttributeValidLFQNWithKeywordsParserRuleCall_2_0_0_2_0_1 = (RuleCall)cInheritedFeatureLEntityAttributeCrossReference_2_0_0_2_0.eContents().get(1);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cMaptoKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final CrossReference cTypeLDtoCrossReference_2_0_1_1_0 = (CrossReference)cTypeAssignment_2_0_1_1.eContents().get(0);
		private final RuleCall cTypeLDtoIDTerminalRuleCall_2_0_1_1_0_1 = (RuleCall)cTypeLDtoCrossReference_2_0_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_2 = (Alternatives)cGroup_2_0.eContents().get(2);
		private final Assignment cMapperAssignment_2_0_2_0 = (Assignment)cAlternatives_2_0_2.eContents().get(0);
		private final RuleCall cMapperDtoMapperParserRuleCall_2_0_2_0_0 = (RuleCall)cMapperAssignment_2_0_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_2_1 = (Keyword)cAlternatives_2_0_2.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cLDtoInheritedReferenceAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cInheritRefKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cInheritedFeatureAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final CrossReference cInheritedFeatureLEntityReferenceCrossReference_2_1_1_1_0 = (CrossReference)cInheritedFeatureAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cInheritedFeatureLEntityReferenceValidLFQNWithKeywordsParserRuleCall_2_1_1_1_0_1 = (RuleCall)cInheritedFeatureLEntityReferenceCrossReference_2_1_1_1_0.eContents().get(1);
		private final Keyword cMaptoKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cTypeAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final CrossReference cTypeLDtoCrossReference_2_1_3_0 = (CrossReference)cTypeAssignment_2_1_3.eContents().get(0);
		private final RuleCall cTypeLDtoIDTerminalRuleCall_2_1_3_0_1 = (RuleCall)cTypeLDtoCrossReference_2_1_3_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1_4 = (Alternatives)cGroup_2_1.eContents().get(4);
		private final Assignment cMapperAssignment_2_1_4_0 = (Assignment)cAlternatives_2_1_4.eContents().get(0);
		private final RuleCall cMapperDtoMapperParserRuleCall_2_1_4_0_0 = (RuleCall)cMapperAssignment_2_1_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4_1 = (Keyword)cAlternatives_2_1_4.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Action cLDtoAttributeAnnotationInfoAction_2_2_0 = (Action)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Assignment cTransientAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final Keyword cTransientTransientKeyword_2_2_1_0_0 = (Keyword)cTransientAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final CrossReference cTypeLScalarTypeCrossReference_2_2_1_1_0 = (CrossReference)cTypeAssignment_2_2_1_1.eContents().get(0);
		private final RuleCall cTypeLScalarTypeIDTerminalRuleCall_2_2_1_1_0_1 = (RuleCall)cTypeLScalarTypeCrossReference_2_2_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2_2_1_2 = (Assignment)cGroup_2_2_1.eContents().get(2);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_2_1_2_0 = (RuleCall)cNameAssignment_2_2_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_1_3 = (Keyword)cGroup_2_2_1.eContents().get(3);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Action cLDtoAttributeAnnotationInfoAction_2_3_0 = (Action)cGroup_2_3.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Assignment cDerivedAssignment_2_3_1_0 = (Assignment)cGroup_2_3_1.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_2_3_1_0_0 = (Keyword)cDerivedAssignment_2_3_1_0.eContents().get(0);
		private final Assignment cDomainDescriptionAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final Keyword cDomainDescriptionDomainDescriptionKeyword_2_3_1_1_0 = (Keyword)cDomainDescriptionAssignment_2_3_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_3_1_2 = (Assignment)cGroup_2_3_1.eContents().get(2);
		private final CrossReference cTypeLScalarTypeCrossReference_2_3_1_2_0 = (CrossReference)cTypeAssignment_2_3_1_2.eContents().get(0);
		private final RuleCall cTypeLScalarTypeIDTerminalRuleCall_2_3_1_2_0_1 = (RuleCall)cTypeLScalarTypeCrossReference_2_3_1_2_0.eContents().get(1);
		private final Assignment cNameAssignment_2_3_1_3 = (Assignment)cGroup_2_3_1.eContents().get(3);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_3_1_3_0 = (RuleCall)cNameAssignment_2_3_1_3.eContents().get(0);
		private final Assignment cDerivedGetterExpressionAssignment_2_3_1_4 = (Assignment)cGroup_2_3_1.eContents().get(4);
		private final RuleCall cDerivedGetterExpressionXBlockExpressionParserRuleCall_2_3_1_4_0 = (RuleCall)cDerivedGetterExpressionAssignment_2_3_1_4.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cAlternatives_2.eContents().get(4);
		private final Action cLDtoAttributeAnnotationInfoAction_2_4_0 = (Action)cGroup_2_4.eContents().get(0);
		private final Alternatives cAlternatives_2_4_1 = (Alternatives)cGroup_2_4.eContents().get(1);
		private final Assignment cIdAssignment_2_4_1_0 = (Assignment)cAlternatives_2_4_1.eContents().get(0);
		private final Keyword cIdIdKeyword_2_4_1_0_0 = (Keyword)cIdAssignment_2_4_1_0.eContents().get(0);
		private final Assignment cVersionAssignment_2_4_1_1 = (Assignment)cAlternatives_2_4_1.eContents().get(1);
		private final Keyword cVersionVersionKeyword_2_4_1_1_0 = (Keyword)cVersionAssignment_2_4_1_1.eContents().get(0);
		private final Assignment cUuidAssignment_2_4_1_2 = (Assignment)cAlternatives_2_4_1.eContents().get(2);
		private final Keyword cUuidUuidKeyword_2_4_1_2_0 = (Keyword)cUuidAssignment_2_4_1_2.eContents().get(0);
		private final Assignment cDomainDescriptionAssignment_2_4_1_3 = (Assignment)cAlternatives_2_4_1.eContents().get(3);
		private final Keyword cDomainDescriptionDomainDescriptionKeyword_2_4_1_3_0 = (Keyword)cDomainDescriptionAssignment_2_4_1_3.eContents().get(0);
		private final Assignment cDomainKeyAssignment_2_4_1_4 = (Assignment)cAlternatives_2_4_1.eContents().get(4);
		private final Keyword cDomainKeyDomainKeyKeyword_2_4_1_4_0 = (Keyword)cDomainKeyAssignment_2_4_1_4.eContents().get(0);
		private final Assignment cTypeAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final CrossReference cTypeLScalarTypeCrossReference_2_4_2_0 = (CrossReference)cTypeAssignment_2_4_2.eContents().get(0);
		private final RuleCall cTypeLScalarTypeIDTerminalRuleCall_2_4_2_0_1 = (RuleCall)cTypeLScalarTypeCrossReference_2_4_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2_4_3 = (Assignment)cGroup_2_4.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_4_3_0 = (RuleCall)cMultiplicityAssignment_2_4_3.eContents().get(0);
		private final Assignment cNameAssignment_2_4_4 = (Assignment)cGroup_2_4.eContents().get(4);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_4_4_0 = (RuleCall)cNameAssignment_2_4_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4_5 = (Keyword)cGroup_2_4.eContents().get(5);
		private final Group cGroup_2_5 = (Group)cAlternatives_2.eContents().get(5);
		private final Action cLDtoReferenceAnnotationInfoAction_2_5_0 = (Action)cGroup_2_5.eContents().get(0);
		private final Group cGroup_2_5_1 = (Group)cGroup_2_5.eContents().get(1);
		private final Keyword cRefKeyword_2_5_1_0 = (Keyword)cGroup_2_5_1.eContents().get(0);
		private final Assignment cCascadingAssignment_2_5_1_1 = (Assignment)cGroup_2_5_1.eContents().get(1);
		private final Keyword cCascadingCascadeKeyword_2_5_1_1_0 = (Keyword)cCascadingAssignment_2_5_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_5_1_2 = (Assignment)cGroup_2_5_1.eContents().get(2);
		private final CrossReference cTypeLDtoCrossReference_2_5_1_2_0 = (CrossReference)cTypeAssignment_2_5_1_2.eContents().get(0);
		private final RuleCall cTypeLDtoIDTerminalRuleCall_2_5_1_2_0_1 = (RuleCall)cTypeLDtoCrossReference_2_5_1_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2_5_1_3 = (Assignment)cGroup_2_5_1.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_5_1_3_0 = (RuleCall)cMultiplicityAssignment_2_5_1_3.eContents().get(0);
		private final Assignment cNameAssignment_2_5_1_4 = (Assignment)cGroup_2_5_1.eContents().get(4);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_5_1_4_0 = (RuleCall)cNameAssignment_2_5_1_4.eContents().get(0);
		private final Group cGroup_2_5_1_5 = (Group)cGroup_2_5_1.eContents().get(5);
		private final Keyword cOppositeKeyword_2_5_1_5_0 = (Keyword)cGroup_2_5_1_5.eContents().get(0);
		private final Assignment cOppositeAssignment_2_5_1_5_1 = (Assignment)cGroup_2_5_1_5.eContents().get(1);
		private final CrossReference cOppositeLDtoReferenceCrossReference_2_5_1_5_1_0 = (CrossReference)cOppositeAssignment_2_5_1_5_1.eContents().get(0);
		private final RuleCall cOppositeLDtoReferenceLFQNParserRuleCall_2_5_1_5_1_0_1 = (RuleCall)cOppositeLDtoReferenceCrossReference_2_5_1_5_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2_5_2 = (Alternatives)cGroup_2_5.eContents().get(2);
		private final Assignment cMapperAssignment_2_5_2_0 = (Assignment)cAlternatives_2_5_2.eContents().get(0);
		private final RuleCall cMapperLimitedMapperDtoMapperParserRuleCall_2_5_2_0_0 = (RuleCall)cMapperAssignment_2_5_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5_2_1 = (Keyword)cAlternatives_2_5_2.eContents().get(1);
		private final Group cGroup_2_6 = (Group)cAlternatives_2.eContents().get(6);
		private final Action cLDtoAttributeAnnotationInfoAction_2_6_0 = (Action)cGroup_2_6.eContents().get(0);
		private final Keyword cVarKeyword_2_6_1 = (Keyword)cGroup_2_6.eContents().get(1);
		private final Assignment cTypeAssignment_2_6_2 = (Assignment)cGroup_2_6.eContents().get(2);
		private final CrossReference cTypeLScalarTypeCrossReference_2_6_2_0 = (CrossReference)cTypeAssignment_2_6_2.eContents().get(0);
		private final RuleCall cTypeLScalarTypeIDTerminalRuleCall_2_6_2_0_1 = (RuleCall)cTypeLScalarTypeCrossReference_2_6_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2_6_3 = (Assignment)cGroup_2_6.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_6_3_0 = (RuleCall)cMultiplicityAssignment_2_6_3.eContents().get(0);
		private final Assignment cNameAssignment_2_6_4 = (Assignment)cGroup_2_6.eContents().get(4);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_6_4_0 = (RuleCall)cNameAssignment_2_6_4.eContents().get(0);
		private final Alternatives cAlternatives_2_6_5 = (Alternatives)cGroup_2_6.eContents().get(5);
		private final Assignment cMapperAssignment_2_6_5_0 = (Assignment)cAlternatives_2_6_5.eContents().get(0);
		private final RuleCall cMapperLimitedMapperDtoMapperParserRuleCall_2_6_5_0_0 = (RuleCall)cMapperAssignment_2_6_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_6_5_1 = (Keyword)cAlternatives_2_6_5.eContents().get(1);
		private final Group cGroup_2_7 = (Group)cAlternatives_2.eContents().get(7);
		private final Action cLDtoOperationAnnotationInfoAction_2_7_0 = (Action)cGroup_2_7.eContents().get(0);
		private final Group cGroup_2_7_1 = (Group)cGroup_2_7.eContents().get(1);
		private final Keyword cDefKeyword_2_7_1_0 = (Keyword)cGroup_2_7_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_7_1_1 = (Assignment)cGroup_2_7_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_7_1_1_0 = (RuleCall)cTypeAssignment_2_7_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2_7_1_2 = (Assignment)cGroup_2_7_1.eContents().get(2);
		private final RuleCall cNameValidIDWithKeywordsParserRuleCall_2_7_1_2_0 = (RuleCall)cNameAssignment_2_7_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_7_1_3 = (Keyword)cGroup_2_7_1.eContents().get(3);
		private final Group cGroup_2_7_1_4 = (Group)cGroup_2_7_1.eContents().get(4);
		private final Assignment cParamsAssignment_2_7_1_4_0 = (Assignment)cGroup_2_7_1_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_0_0 = (RuleCall)cParamsAssignment_2_7_1_4_0.eContents().get(0);
		private final Group cGroup_2_7_1_4_1 = (Group)cGroup_2_7_1_4.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_2_7_1_4_1_0 = (Keyword)cGroup_2_7_1_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_7_1_4_1_1 = (Assignment)cGroup_2_7_1_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_1_1_0 = (RuleCall)cParamsAssignment_2_7_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_7_1_5 = (Keyword)cGroup_2_7_1.eContents().get(5);
		private final Assignment cBodyAssignment_2_7_1_6 = (Assignment)cGroup_2_7_1.eContents().get(6);
		private final RuleCall cBodyXExpressionParserRuleCall_2_7_1_6_0 = (RuleCall)cBodyAssignment_2_7_1_6.eContents().get(0);
		
		//DtoFeature returns dto::LDtoFeature:
		//	{dto::LDtoFeature} annotations+=AnnotationDef* (({dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
		//	inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ("mapto" type=[dto::LDto])? (mapper=DtoMapper |
		//	";") | {dto::LDtoInheritedReference.annotationInfo=current} ("inherit ref"
		//	inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) "mapto" type=[dto::LDto] (mapper=DtoMapper | ";") |
		//	{dto::LDtoAttribute.annotationInfo=current} (transient?="transient" type=[common::LScalarType]
		//	name=ValidIDWithKeywords ";") | {dto::LDtoAttribute.annotationInfo=current} (derived?="derived"
		//	domainDescription?="domainDescription"? type=[common::LScalarType] name=ValidIDWithKeywords
		//	derivedGetterExpression=XBlockExpression) | {dto::LDtoAttribute.annotationInfo=current} (id?="id" | version?="version"
		//	| uuid?="uuid" | domainDescription?="domainDescription" | domainKey?="domainKey") type=[common::LScalarType]
		//	multiplicity=Multiplicity? name=ValidIDWithKeywords ";" | {dto::LDtoReference.annotationInfo=current} ("ref"
		//	cascading?="cascade"? type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords ("opposite"
		//	opposite=[dto::LDtoReference|LFQN])?) (mapper=LimitedMapperDtoMapper | ";") |
		//	{dto::LDtoAttribute.annotationInfo=current} "var" type=[common::LScalarType] multiplicity=Multiplicity?
		//	name=ValidIDWithKeywords (mapper=LimitedMapperDtoMapper | ";") | {dto::LDtoOperation.annotationInfo=current} ("def"
		//	type=JvmTypeReference name=ValidIDWithKeywords "(" (params+=FullJvmFormalParameter (", "
		//	params+=FullJvmFormalParameter)*)? ")" body=XExpression));
		public ParserRule getRule() { return rule; }

		//{dto::LDtoFeature} annotations+=AnnotationDef* (({dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
		//inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ("mapto" type=[dto::LDto])? (mapper=DtoMapper | ";")
		//| {dto::LDtoInheritedReference.annotationInfo=current} ("inherit ref"
		//inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) "mapto" type=[dto::LDto] (mapper=DtoMapper | ";") |
		//{dto::LDtoAttribute.annotationInfo=current} (transient?="transient" type=[common::LScalarType] name=ValidIDWithKeywords
		//";") | {dto::LDtoAttribute.annotationInfo=current} (derived?="derived" domainDescription?="domainDescription"?
		//type=[common::LScalarType] name=ValidIDWithKeywords derivedGetterExpression=XBlockExpression) |
		//{dto::LDtoAttribute.annotationInfo=current} (id?="id" | version?="version" | uuid?="uuid" |
		//domainDescription?="domainDescription" | domainKey?="domainKey") type=[common::LScalarType] multiplicity=Multiplicity?
		//name=ValidIDWithKeywords ";" | {dto::LDtoReference.annotationInfo=current} ("ref" cascading?="cascade"?
		//type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords ("opposite" opposite=[dto::LDtoReference|LFQN])?)
		//(mapper=LimitedMapperDtoMapper | ";") | {dto::LDtoAttribute.annotationInfo=current} "var" type=[common::LScalarType]
		//multiplicity=Multiplicity? name=ValidIDWithKeywords (mapper=LimitedMapperDtoMapper | ";") |
		//{dto::LDtoOperation.annotationInfo=current} ("def" type=JvmTypeReference name=ValidIDWithKeywords "("
		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression))
		public Group getGroup() { return cGroup; }

		//{dto::LDtoFeature}
		public Action getLDtoFeatureAction_0() { return cLDtoFeatureAction_0; }

		//annotations+=AnnotationDef*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AnnotationDef
		public RuleCall getAnnotationsAnnotationDefParserRuleCall_1_0() { return cAnnotationsAnnotationDefParserRuleCall_1_0; }

		//({dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
		//inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ("mapto" type=[dto::LDto])? (mapper=DtoMapper | ";")
		//| {dto::LDtoInheritedReference.annotationInfo=current} ("inherit ref"
		//inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) "mapto" type=[dto::LDto] (mapper=DtoMapper | ";") |
		//{dto::LDtoAttribute.annotationInfo=current} (transient?="transient" type=[common::LScalarType] name=ValidIDWithKeywords
		//";") | {dto::LDtoAttribute.annotationInfo=current} (derived?="derived" domainDescription?="domainDescription"?
		//type=[common::LScalarType] name=ValidIDWithKeywords derivedGetterExpression=XBlockExpression) |
		//{dto::LDtoAttribute.annotationInfo=current} (id?="id" | version?="version" | uuid?="uuid" |
		//domainDescription?="domainDescription" | domainKey?="domainKey") type=[common::LScalarType] multiplicity=Multiplicity?
		//name=ValidIDWithKeywords ";" | {dto::LDtoReference.annotationInfo=current} ("ref" cascading?="cascade"?
		//type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords ("opposite" opposite=[dto::LDtoReference|LFQN])?)
		//(mapper=LimitedMapperDtoMapper | ";") | {dto::LDtoAttribute.annotationInfo=current} "var" type=[common::LScalarType]
		//multiplicity=Multiplicity? name=ValidIDWithKeywords (mapper=LimitedMapperDtoMapper | ";") |
		//{dto::LDtoOperation.annotationInfo=current} ("def" type=JvmTypeReference name=ValidIDWithKeywords "("
		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//({dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
		//inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ("mapto" type=[dto::LDto])? (mapper=DtoMapper | ";")
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
		//inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//{dto::LDtoInheritedAttribute.annotationInfo=current}
		public Action getLDtoInheritedAttributeAnnotationInfoAction_2_0_0_0() { return cLDtoInheritedAttributeAnnotationInfoAction_2_0_0_0; }

		//"inherit var"
		public Keyword getInheritVarKeyword_2_0_0_1() { return cInheritVarKeyword_2_0_0_1; }

		//inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]
		public Assignment getInheritedFeatureAssignment_2_0_0_2() { return cInheritedFeatureAssignment_2_0_0_2; }

		//[entity::LEntityAttribute|ValidLFQNWithKeywords]
		public CrossReference getInheritedFeatureLEntityAttributeCrossReference_2_0_0_2_0() { return cInheritedFeatureLEntityAttributeCrossReference_2_0_0_2_0; }

		//ValidLFQNWithKeywords
		public RuleCall getInheritedFeatureLEntityAttributeValidLFQNWithKeywordsParserRuleCall_2_0_0_2_0_1() { return cInheritedFeatureLEntityAttributeValidLFQNWithKeywordsParserRuleCall_2_0_0_2_0_1; }

		//("mapto" type=[dto::LDto])?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//"mapto"
		public Keyword getMaptoKeyword_2_0_1_0() { return cMaptoKeyword_2_0_1_0; }

		//type=[dto::LDto]
		public Assignment getTypeAssignment_2_0_1_1() { return cTypeAssignment_2_0_1_1; }

		//[dto::LDto]
		public CrossReference getTypeLDtoCrossReference_2_0_1_1_0() { return cTypeLDtoCrossReference_2_0_1_1_0; }

		//ID
		public RuleCall getTypeLDtoIDTerminalRuleCall_2_0_1_1_0_1() { return cTypeLDtoIDTerminalRuleCall_2_0_1_1_0_1; }

		//mapper=DtoMapper | ";"
		public Alternatives getAlternatives_2_0_2() { return cAlternatives_2_0_2; }

		//mapper=DtoMapper
		public Assignment getMapperAssignment_2_0_2_0() { return cMapperAssignment_2_0_2_0; }

		//DtoMapper
		public RuleCall getMapperDtoMapperParserRuleCall_2_0_2_0_0() { return cMapperDtoMapperParserRuleCall_2_0_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_2_1() { return cSemicolonKeyword_2_0_2_1; }

		//{dto::LDtoInheritedReference.annotationInfo=current} ("inherit ref"
		//inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) "mapto" type=[dto::LDto] (mapper=DtoMapper | ";")
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{dto::LDtoInheritedReference.annotationInfo=current}
		public Action getLDtoInheritedReferenceAnnotationInfoAction_2_1_0() { return cLDtoInheritedReferenceAnnotationInfoAction_2_1_0; }

		//"inherit ref" inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"inherit ref"
		public Keyword getInheritRefKeyword_2_1_1_0() { return cInheritRefKeyword_2_1_1_0; }

		//inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]
		public Assignment getInheritedFeatureAssignment_2_1_1_1() { return cInheritedFeatureAssignment_2_1_1_1; }

		//[entity::LEntityReference|ValidLFQNWithKeywords]
		public CrossReference getInheritedFeatureLEntityReferenceCrossReference_2_1_1_1_0() { return cInheritedFeatureLEntityReferenceCrossReference_2_1_1_1_0; }

		//ValidLFQNWithKeywords
		public RuleCall getInheritedFeatureLEntityReferenceValidLFQNWithKeywordsParserRuleCall_2_1_1_1_0_1() { return cInheritedFeatureLEntityReferenceValidLFQNWithKeywordsParserRuleCall_2_1_1_1_0_1; }

		//"mapto"
		public Keyword getMaptoKeyword_2_1_2() { return cMaptoKeyword_2_1_2; }

		//type=[dto::LDto]
		public Assignment getTypeAssignment_2_1_3() { return cTypeAssignment_2_1_3; }

		//[dto::LDto]
		public CrossReference getTypeLDtoCrossReference_2_1_3_0() { return cTypeLDtoCrossReference_2_1_3_0; }

		//ID
		public RuleCall getTypeLDtoIDTerminalRuleCall_2_1_3_0_1() { return cTypeLDtoIDTerminalRuleCall_2_1_3_0_1; }

		//mapper=DtoMapper | ";"
		public Alternatives getAlternatives_2_1_4() { return cAlternatives_2_1_4; }

		//mapper=DtoMapper
		public Assignment getMapperAssignment_2_1_4_0() { return cMapperAssignment_2_1_4_0; }

		//DtoMapper
		public RuleCall getMapperDtoMapperParserRuleCall_2_1_4_0_0() { return cMapperDtoMapperParserRuleCall_2_1_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_4_1() { return cSemicolonKeyword_2_1_4_1; }

		//{dto::LDtoAttribute.annotationInfo=current} (transient?="transient" type=[common::LScalarType] name=ValidIDWithKeywords
		//";")
		public Group getGroup_2_2() { return cGroup_2_2; }

		//{dto::LDtoAttribute.annotationInfo=current}
		public Action getLDtoAttributeAnnotationInfoAction_2_2_0() { return cLDtoAttributeAnnotationInfoAction_2_2_0; }

		//transient?="transient" type=[common::LScalarType] name=ValidIDWithKeywords ";"
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//transient?="transient"
		public Assignment getTransientAssignment_2_2_1_0() { return cTransientAssignment_2_2_1_0; }

		//"transient"
		public Keyword getTransientTransientKeyword_2_2_1_0_0() { return cTransientTransientKeyword_2_2_1_0_0; }

		//type=[common::LScalarType]
		public Assignment getTypeAssignment_2_2_1_1() { return cTypeAssignment_2_2_1_1; }

		//[common::LScalarType]
		public CrossReference getTypeLScalarTypeCrossReference_2_2_1_1_0() { return cTypeLScalarTypeCrossReference_2_2_1_1_0; }

		//ID
		public RuleCall getTypeLScalarTypeIDTerminalRuleCall_2_2_1_1_0_1() { return cTypeLScalarTypeIDTerminalRuleCall_2_2_1_1_0_1; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_2_1_2() { return cNameAssignment_2_2_1_2; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_2_1_2_0() { return cNameValidIDWithKeywordsParserRuleCall_2_2_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2_1_3() { return cSemicolonKeyword_2_2_1_3; }

		//{dto::LDtoAttribute.annotationInfo=current} (derived?="derived" domainDescription?="domainDescription"?
		//type=[common::LScalarType] name=ValidIDWithKeywords derivedGetterExpression=XBlockExpression)
		public Group getGroup_2_3() { return cGroup_2_3; }

		//{dto::LDtoAttribute.annotationInfo=current}
		public Action getLDtoAttributeAnnotationInfoAction_2_3_0() { return cLDtoAttributeAnnotationInfoAction_2_3_0; }

		//derived?="derived" domainDescription?="domainDescription"? type=[common::LScalarType] name=ValidIDWithKeywords
		//derivedGetterExpression=XBlockExpression
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//derived?="derived"
		public Assignment getDerivedAssignment_2_3_1_0() { return cDerivedAssignment_2_3_1_0; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_2_3_1_0_0() { return cDerivedDerivedKeyword_2_3_1_0_0; }

		//domainDescription?="domainDescription"?
		public Assignment getDomainDescriptionAssignment_2_3_1_1() { return cDomainDescriptionAssignment_2_3_1_1; }

		//"domainDescription"
		public Keyword getDomainDescriptionDomainDescriptionKeyword_2_3_1_1_0() { return cDomainDescriptionDomainDescriptionKeyword_2_3_1_1_0; }

		//type=[common::LScalarType]
		public Assignment getTypeAssignment_2_3_1_2() { return cTypeAssignment_2_3_1_2; }

		//[common::LScalarType]
		public CrossReference getTypeLScalarTypeCrossReference_2_3_1_2_0() { return cTypeLScalarTypeCrossReference_2_3_1_2_0; }

		//ID
		public RuleCall getTypeLScalarTypeIDTerminalRuleCall_2_3_1_2_0_1() { return cTypeLScalarTypeIDTerminalRuleCall_2_3_1_2_0_1; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_3_1_3() { return cNameAssignment_2_3_1_3; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_3_1_3_0() { return cNameValidIDWithKeywordsParserRuleCall_2_3_1_3_0; }

		//derivedGetterExpression=XBlockExpression
		public Assignment getDerivedGetterExpressionAssignment_2_3_1_4() { return cDerivedGetterExpressionAssignment_2_3_1_4; }

		//XBlockExpression
		public RuleCall getDerivedGetterExpressionXBlockExpressionParserRuleCall_2_3_1_4_0() { return cDerivedGetterExpressionXBlockExpressionParserRuleCall_2_3_1_4_0; }

		//{dto::LDtoAttribute.annotationInfo=current} (id?="id" | version?="version" | uuid?="uuid" |
		//domainDescription?="domainDescription" | domainKey?="domainKey") type=[common::LScalarType] multiplicity=Multiplicity?
		//name=ValidIDWithKeywords ";"
		public Group getGroup_2_4() { return cGroup_2_4; }

		//{dto::LDtoAttribute.annotationInfo=current}
		public Action getLDtoAttributeAnnotationInfoAction_2_4_0() { return cLDtoAttributeAnnotationInfoAction_2_4_0; }

		//id?="id" | version?="version" | uuid?="uuid" | domainDescription?="domainDescription" | domainKey?="domainKey"
		public Alternatives getAlternatives_2_4_1() { return cAlternatives_2_4_1; }

		//id?="id"
		public Assignment getIdAssignment_2_4_1_0() { return cIdAssignment_2_4_1_0; }

		//"id"
		public Keyword getIdIdKeyword_2_4_1_0_0() { return cIdIdKeyword_2_4_1_0_0; }

		//version?="version"
		public Assignment getVersionAssignment_2_4_1_1() { return cVersionAssignment_2_4_1_1; }

		//"version"
		public Keyword getVersionVersionKeyword_2_4_1_1_0() { return cVersionVersionKeyword_2_4_1_1_0; }

		//uuid?="uuid"
		public Assignment getUuidAssignment_2_4_1_2() { return cUuidAssignment_2_4_1_2; }

		//"uuid"
		public Keyword getUuidUuidKeyword_2_4_1_2_0() { return cUuidUuidKeyword_2_4_1_2_0; }

		//domainDescription?="domainDescription"
		public Assignment getDomainDescriptionAssignment_2_4_1_3() { return cDomainDescriptionAssignment_2_4_1_3; }

		//"domainDescription"
		public Keyword getDomainDescriptionDomainDescriptionKeyword_2_4_1_3_0() { return cDomainDescriptionDomainDescriptionKeyword_2_4_1_3_0; }

		//domainKey?="domainKey"
		public Assignment getDomainKeyAssignment_2_4_1_4() { return cDomainKeyAssignment_2_4_1_4; }

		//"domainKey"
		public Keyword getDomainKeyDomainKeyKeyword_2_4_1_4_0() { return cDomainKeyDomainKeyKeyword_2_4_1_4_0; }

		//type=[common::LScalarType]
		public Assignment getTypeAssignment_2_4_2() { return cTypeAssignment_2_4_2; }

		//[common::LScalarType]
		public CrossReference getTypeLScalarTypeCrossReference_2_4_2_0() { return cTypeLScalarTypeCrossReference_2_4_2_0; }

		//ID
		public RuleCall getTypeLScalarTypeIDTerminalRuleCall_2_4_2_0_1() { return cTypeLScalarTypeIDTerminalRuleCall_2_4_2_0_1; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2_4_3() { return cMultiplicityAssignment_2_4_3; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_4_3_0() { return cMultiplicityMultiplicityParserRuleCall_2_4_3_0; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_4_4() { return cNameAssignment_2_4_4; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_4_4_0() { return cNameValidIDWithKeywordsParserRuleCall_2_4_4_0; }

		//";"
		public Keyword getSemicolonKeyword_2_4_5() { return cSemicolonKeyword_2_4_5; }

		//{dto::LDtoReference.annotationInfo=current} ("ref" cascading?="cascade"? type=[dto::LDto] multiplicity=Multiplicity?
		//name=ValidIDWithKeywords ("opposite" opposite=[dto::LDtoReference|LFQN])?) (mapper=LimitedMapperDtoMapper | ";")
		public Group getGroup_2_5() { return cGroup_2_5; }

		//{dto::LDtoReference.annotationInfo=current}
		public Action getLDtoReferenceAnnotationInfoAction_2_5_0() { return cLDtoReferenceAnnotationInfoAction_2_5_0; }

		//"ref" cascading?="cascade"? type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords ("opposite"
		//opposite=[dto::LDtoReference|LFQN])?
		public Group getGroup_2_5_1() { return cGroup_2_5_1; }

		//"ref"
		public Keyword getRefKeyword_2_5_1_0() { return cRefKeyword_2_5_1_0; }

		//cascading?="cascade"?
		public Assignment getCascadingAssignment_2_5_1_1() { return cCascadingAssignment_2_5_1_1; }

		//"cascade"
		public Keyword getCascadingCascadeKeyword_2_5_1_1_0() { return cCascadingCascadeKeyword_2_5_1_1_0; }

		//type=[dto::LDto]
		public Assignment getTypeAssignment_2_5_1_2() { return cTypeAssignment_2_5_1_2; }

		//[dto::LDto]
		public CrossReference getTypeLDtoCrossReference_2_5_1_2_0() { return cTypeLDtoCrossReference_2_5_1_2_0; }

		//ID
		public RuleCall getTypeLDtoIDTerminalRuleCall_2_5_1_2_0_1() { return cTypeLDtoIDTerminalRuleCall_2_5_1_2_0_1; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2_5_1_3() { return cMultiplicityAssignment_2_5_1_3; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_5_1_3_0() { return cMultiplicityMultiplicityParserRuleCall_2_5_1_3_0; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_5_1_4() { return cNameAssignment_2_5_1_4; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_5_1_4_0() { return cNameValidIDWithKeywordsParserRuleCall_2_5_1_4_0; }

		//("opposite" opposite=[dto::LDtoReference|LFQN])?
		public Group getGroup_2_5_1_5() { return cGroup_2_5_1_5; }

		//"opposite"
		public Keyword getOppositeKeyword_2_5_1_5_0() { return cOppositeKeyword_2_5_1_5_0; }

		//opposite=[dto::LDtoReference|LFQN]
		public Assignment getOppositeAssignment_2_5_1_5_1() { return cOppositeAssignment_2_5_1_5_1; }

		//[dto::LDtoReference|LFQN]
		public CrossReference getOppositeLDtoReferenceCrossReference_2_5_1_5_1_0() { return cOppositeLDtoReferenceCrossReference_2_5_1_5_1_0; }

		//LFQN
		public RuleCall getOppositeLDtoReferenceLFQNParserRuleCall_2_5_1_5_1_0_1() { return cOppositeLDtoReferenceLFQNParserRuleCall_2_5_1_5_1_0_1; }

		//mapper=LimitedMapperDtoMapper | ";"
		public Alternatives getAlternatives_2_5_2() { return cAlternatives_2_5_2; }

		//mapper=LimitedMapperDtoMapper
		public Assignment getMapperAssignment_2_5_2_0() { return cMapperAssignment_2_5_2_0; }

		//LimitedMapperDtoMapper
		public RuleCall getMapperLimitedMapperDtoMapperParserRuleCall_2_5_2_0_0() { return cMapperLimitedMapperDtoMapperParserRuleCall_2_5_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_5_2_1() { return cSemicolonKeyword_2_5_2_1; }

		//{dto::LDtoAttribute.annotationInfo=current} "var" type=[common::LScalarType] multiplicity=Multiplicity?
		//name=ValidIDWithKeywords (mapper=LimitedMapperDtoMapper | ";")
		public Group getGroup_2_6() { return cGroup_2_6; }

		//{dto::LDtoAttribute.annotationInfo=current}
		public Action getLDtoAttributeAnnotationInfoAction_2_6_0() { return cLDtoAttributeAnnotationInfoAction_2_6_0; }

		//"var"
		public Keyword getVarKeyword_2_6_1() { return cVarKeyword_2_6_1; }

		//type=[common::LScalarType]
		public Assignment getTypeAssignment_2_6_2() { return cTypeAssignment_2_6_2; }

		//[common::LScalarType]
		public CrossReference getTypeLScalarTypeCrossReference_2_6_2_0() { return cTypeLScalarTypeCrossReference_2_6_2_0; }

		//ID
		public RuleCall getTypeLScalarTypeIDTerminalRuleCall_2_6_2_0_1() { return cTypeLScalarTypeIDTerminalRuleCall_2_6_2_0_1; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2_6_3() { return cMultiplicityAssignment_2_6_3; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_6_3_0() { return cMultiplicityMultiplicityParserRuleCall_2_6_3_0; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_6_4() { return cNameAssignment_2_6_4; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_6_4_0() { return cNameValidIDWithKeywordsParserRuleCall_2_6_4_0; }

		//mapper=LimitedMapperDtoMapper | ";"
		public Alternatives getAlternatives_2_6_5() { return cAlternatives_2_6_5; }

		//mapper=LimitedMapperDtoMapper
		public Assignment getMapperAssignment_2_6_5_0() { return cMapperAssignment_2_6_5_0; }

		//LimitedMapperDtoMapper
		public RuleCall getMapperLimitedMapperDtoMapperParserRuleCall_2_6_5_0_0() { return cMapperLimitedMapperDtoMapperParserRuleCall_2_6_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_6_5_1() { return cSemicolonKeyword_2_6_5_1; }

		//{dto::LDtoOperation.annotationInfo=current} ("def" type=JvmTypeReference name=ValidIDWithKeywords "("
		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)? ")" body=XExpression)
		public Group getGroup_2_7() { return cGroup_2_7; }

		//{dto::LDtoOperation.annotationInfo=current}
		public Action getLDtoOperationAnnotationInfoAction_2_7_0() { return cLDtoOperationAnnotationInfoAction_2_7_0; }

		//"def" type=JvmTypeReference name=ValidIDWithKeywords "(" (params+=FullJvmFormalParameter (", "
		//params+=FullJvmFormalParameter)*)? ")" body=XExpression
		public Group getGroup_2_7_1() { return cGroup_2_7_1; }

		//"def"
		public Keyword getDefKeyword_2_7_1_0() { return cDefKeyword_2_7_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_7_1_1() { return cTypeAssignment_2_7_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_7_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_7_1_1_0; }

		//name=ValidIDWithKeywords
		public Assignment getNameAssignment_2_7_1_2() { return cNameAssignment_2_7_1_2; }

		//ValidIDWithKeywords
		public RuleCall getNameValidIDWithKeywordsParserRuleCall_2_7_1_2_0() { return cNameValidIDWithKeywordsParserRuleCall_2_7_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_7_1_3() { return cLeftParenthesisKeyword_2_7_1_3; }

		//(params+=FullJvmFormalParameter (", " params+=FullJvmFormalParameter)*)?
		public Group getGroup_2_7_1_4() { return cGroup_2_7_1_4; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_7_1_4_0() { return cParamsAssignment_2_7_1_4_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_0_0; }

		//(", " params+=FullJvmFormalParameter)*
		public Group getGroup_2_7_1_4_1() { return cGroup_2_7_1_4_1; }

		//", "
		public Keyword getCommaSpaceKeyword_2_7_1_4_1_0() { return cCommaSpaceKeyword_2_7_1_4_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_7_1_4_1_1() { return cParamsAssignment_2_7_1_4_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_7_1_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_7_1_5() { return cRightParenthesisKeyword_2_7_1_5; }

		//body=XExpression
		public Assignment getBodyAssignment_2_7_1_6() { return cBodyAssignment_2_7_1_6; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_2_7_1_6_0() { return cBodyXExpressionParserRuleCall_2_7_1_6_0; }
	}

	public class DtoMapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DtoMapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToDTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToDTOAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToDTOXExpressionParserRuleCall_2_0 = (RuleCall)cToDTOAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromDTOKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFromDTOAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFromDTOXExpressionParserRuleCall_3_1_0 = (RuleCall)cFromDTOAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DtoMapper returns dto::LDtoMapper:
		//	"{" "toDTO" toDTO=XExpression ("fromDTO" fromDTO=XExpression)? "}";
		public ParserRule getRule() { return rule; }

		//"{" "toDTO" toDTO=XExpression ("fromDTO" fromDTO=XExpression)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"toDTO"
		public Keyword getToDTOKeyword_1() { return cToDTOKeyword_1; }

		//toDTO=XExpression
		public Assignment getToDTOAssignment_2() { return cToDTOAssignment_2; }

		//XExpression
		public RuleCall getToDTOXExpressionParserRuleCall_2_0() { return cToDTOXExpressionParserRuleCall_2_0; }

		//("fromDTO" fromDTO=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"fromDTO"
		public Keyword getFromDTOKeyword_3_0() { return cFromDTOKeyword_3_0; }

		//fromDTO=XExpression
		public Assignment getFromDTOAssignment_3_1() { return cFromDTOAssignment_3_1; }

		//XExpression
		public RuleCall getFromDTOXExpressionParserRuleCall_3_1_0() { return cFromDTOXExpressionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LimitedMapperDtoMapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedMapperDtoMapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToDTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToDTOAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToDTOXExpressionParserRuleCall_2_0 = (RuleCall)cToDTOAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// custom vars and refs should not be mapped to entity. 
		//LimitedMapperDtoMapper returns dto::LDtoMapper:
		//	"{" "toDTO" toDTO=XExpression "}";
		public ParserRule getRule() { return rule; }

		//"{" "toDTO" toDTO=XExpression "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"toDTO"
		public Keyword getToDTOKeyword_1() { return cToDTOKeyword_1; }

		//toDTO=XExpression
		public Assignment getToDTOAssignment_2() { return cToDTOAssignment_2; }

		//XExpression
		public RuleCall getToDTOXExpressionParserRuleCall_2_0() { return cToDTOXExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RefFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RefFQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final LDTOModelElements pLDTOModel;
	private final ClassElements pClass;
	private final DtoFeatureElements pDtoFeature;
	private final DtoMapperElements pDtoMapper;
	private final LimitedMapperDtoMapperElements pLimitedMapperDtoMapper;
	private final RefFQNElements pRefFQN;
	
	private final Grammar grammar;

	private final CommonGrammarGrammarAccess gaCommonGrammar;

	@Inject
	public DtoGrammarGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarGrammarAccess gaCommonGrammar) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommonGrammar = gaCommonGrammar;
		this.pLDTOModel = new LDTOModelElements();
		this.pClass = new ClassElements();
		this.pDtoFeature = new DtoFeatureElements();
		this.pDtoMapper = new DtoMapperElements();
		this.pLimitedMapperDtoMapper = new LimitedMapperDtoMapperElements();
		this.pRefFQN = new RefFQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.dsl.dto.xtext.DtoGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarGrammarAccess getCommonGrammarGrammarAccess() {
		return gaCommonGrammar;
	}

	
	//LDTOModel returns dto::LDtoModel:
	//	packages+=TypedPackage*;
	public LDTOModelElements getLDTOModelAccess() {
		return pLDTOModel;
	}
	
	public ParserRule getLDTOModelRule() {
		return getLDTOModelAccess().getRule();
	}

	//Class returns dto::LDto:
	//	{dto::LDto} annotations+=AnnotationDef* ({dto::LDto.annotationInfo=current} abstract?="abstract"? "dto"
	//	name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? ("wraps" wrappedType=[entity::LEntity])? "{"
	//	features+=DtoFeature* "}" | {dto::LAutoInheritDto.annotationInfo=current} abstract?="abstract"? "autoDto"
	//	name=ValidIDWithKeywords ("extends" superType=[dto::LDto])? "wraps" wrappedType=[entity::LEntity] "{"
	//	features+=DtoFeature* "}");
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//DtoFeature returns dto::LDtoFeature:
	//	{dto::LDtoFeature} annotations+=AnnotationDef* (({dto::LDtoInheritedAttribute.annotationInfo=current} "inherit var"
	//	inheritedFeature=[entity::LEntityAttribute|ValidLFQNWithKeywords]) ("mapto" type=[dto::LDto])? (mapper=DtoMapper |
	//	";") | {dto::LDtoInheritedReference.annotationInfo=current} ("inherit ref"
	//	inheritedFeature=[entity::LEntityReference|ValidLFQNWithKeywords]) "mapto" type=[dto::LDto] (mapper=DtoMapper | ";") |
	//	{dto::LDtoAttribute.annotationInfo=current} (transient?="transient" type=[common::LScalarType]
	//	name=ValidIDWithKeywords ";") | {dto::LDtoAttribute.annotationInfo=current} (derived?="derived"
	//	domainDescription?="domainDescription"? type=[common::LScalarType] name=ValidIDWithKeywords
	//	derivedGetterExpression=XBlockExpression) | {dto::LDtoAttribute.annotationInfo=current} (id?="id" | version?="version"
	//	| uuid?="uuid" | domainDescription?="domainDescription" | domainKey?="domainKey") type=[common::LScalarType]
	//	multiplicity=Multiplicity? name=ValidIDWithKeywords ";" | {dto::LDtoReference.annotationInfo=current} ("ref"
	//	cascading?="cascade"? type=[dto::LDto] multiplicity=Multiplicity? name=ValidIDWithKeywords ("opposite"
	//	opposite=[dto::LDtoReference|LFQN])?) (mapper=LimitedMapperDtoMapper | ";") |
	//	{dto::LDtoAttribute.annotationInfo=current} "var" type=[common::LScalarType] multiplicity=Multiplicity?
	//	name=ValidIDWithKeywords (mapper=LimitedMapperDtoMapper | ";") | {dto::LDtoOperation.annotationInfo=current} ("def"
	//	type=JvmTypeReference name=ValidIDWithKeywords "(" (params+=FullJvmFormalParameter (", "
	//	params+=FullJvmFormalParameter)*)? ")" body=XExpression));
	public DtoFeatureElements getDtoFeatureAccess() {
		return pDtoFeature;
	}
	
	public ParserRule getDtoFeatureRule() {
		return getDtoFeatureAccess().getRule();
	}

	//DtoMapper returns dto::LDtoMapper:
	//	"{" "toDTO" toDTO=XExpression ("fromDTO" fromDTO=XExpression)? "}";
	public DtoMapperElements getDtoMapperAccess() {
		return pDtoMapper;
	}
	
	public ParserRule getDtoMapperRule() {
		return getDtoMapperAccess().getRule();
	}

	//// custom vars and refs should not be mapped to entity. 
	//LimitedMapperDtoMapper returns dto::LDtoMapper:
	//	"{" "toDTO" toDTO=XExpression "}";
	public LimitedMapperDtoMapperElements getLimitedMapperDtoMapperAccess() {
		return pLimitedMapperDtoMapper;
	}
	
	public ParserRule getLimitedMapperDtoMapperRule() {
		return getLimitedMapperDtoMapperAccess().getRule();
	}

	//RefFQN:
	//	ID ("." ID)*;
	public RefFQNElements getRefFQNAccess() {
		return pRefFQN;
	}
	
	public ParserRule getRefFQNRule() {
		return getRefFQNAccess().getRule();
	}

	//TypedPackage returns types::LTypedPackage:
	//	{types::LTypedPackage} "package" name=QualifiedName ("{" imports+=Import* types+=Type* "}")?;
	public CommonGrammarGrammarAccess.TypedPackageElements getTypedPackageAccess() {
		return gaCommonGrammar.getTypedPackageAccess();
	}
	
	public ParserRule getTypedPackageRule() {
		return getTypedPackageAccess().getRule();
	}

	//Type returns types::LType:
	//	ScalarType | Class;
	public CommonGrammarGrammarAccess.TypeElements getTypeAccess() {
		return gaCommonGrammar.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Import returns types::LImport:
	//	"import" importedNamespace=LQualifiedNameWithWildCard ";";
	public CommonGrammarGrammarAccess.ImportElements getImportAccess() {
		return gaCommonGrammar.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//DataType returns types::LDataType:
	//	"datatype" name=ValidIDWithKeywords ("jvmType" jvmTypeReference=JvmTypeReference asPrimitive?="as primitive"? |
	//	date?="dateType" dateType=DateType | asBlob?="as blob") ";";
	public CommonGrammarGrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaCommonGrammar.getDataTypeAccess();
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum DateType returns types::LDateType:
	//	DATE="date" | TIME="time" | TIMESTAMP="timestamp";
	public CommonGrammarGrammarAccess.DateTypeElements getDateTypeAccess() {
		return gaCommonGrammar.getDateTypeAccess();
	}
	
	public EnumRule getDateTypeRule() {
		return getDateTypeAccess().getRule();
	}

	//ScalarType returns types::LScalarType:
	//	DataType | Enum;
	public CommonGrammarGrammarAccess.ScalarTypeElements getScalarTypeAccess() {
		return gaCommonGrammar.getScalarTypeAccess();
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	//Modifier returns types::LModifier:
	//	final?="final"? & static?="static"? & visibility=LVisibility;
	public CommonGrammarGrammarAccess.ModifierElements getModifierAccess() {
		return gaCommonGrammar.getModifierAccess();
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Enum returns types::LEnum:
	//	"enum" name=ID "{" literals+=EnumLiteral (", " literals+=EnumLiteral)* "}";
	public CommonGrammarGrammarAccess.EnumElements getEnumAccess() {
		return gaCommonGrammar.getEnumAccess();
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumLiteral returns types::LEnumLiteral:
	//	name=ID;
	public CommonGrammarGrammarAccess.EnumLiteralElements getEnumLiteralAccess() {
		return gaCommonGrammar.getEnumLiteralAccess();
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}

	//AnnotationDef returns types::LAnnotationDef:
	//	=> (annotation=XAnnotation);
	public CommonGrammarGrammarAccess.AnnotationDefElements getAnnotationDefAccess() {
		return gaCommonGrammar.getAnnotationDefAccess();
	}
	
	public ParserRule getAnnotationDefRule() {
		return getAnnotationDefAccess().getRule();
	}

	//enum LVisibility returns types::LVisibility:
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public CommonGrammarGrammarAccess.LVisibilityElements getLVisibilityAccess() {
		return gaCommonGrammar.getLVisibilityAccess();
	}
	
	public EnumRule getLVisibilityRule() {
		return getLVisibilityAccess().getRule();
	}

	//Constraints returns types::LConstraints:
	//	{types::LConstraints} "constraints" "{" constraints+=Constraint* "}";
	public CommonGrammarGrammarAccess.ConstraintsElements getConstraintsAccess() {
		return gaCommonGrammar.getConstraintsAccess();
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}

	//Constraint returns types::LConstraint:
	//	AttributeMatchingConstraint;
	public CommonGrammarGrammarAccess.ConstraintElements getConstraintAccess() {
		return gaCommonGrammar.getConstraintAccess();
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//AttributeMatchingConstraint returns types::LAttributeMatchingConstraint:
	//	attribute=[types::LAttribute] comparatorType=LComparatorType (matchingValue=STRING | =>
	//	matchingLiteral=[types::LEnumLiteral]) ";";
	public CommonGrammarGrammarAccess.AttributeMatchingConstraintElements getAttributeMatchingConstraintAccess() {
		return gaCommonGrammar.getAttributeMatchingConstraintAccess();
	}
	
	public ParserRule getAttributeMatchingConstraintRule() {
		return getAttributeMatchingConstraintAccess().getRule();
	}

	//enum LComparatorType returns types::LComparatorType:
	//	EQUALS="==" | GREATER=">" | LOWER="<" | GREATER_EQ=">=" | LOWER_EQ="<=" | NOT_EQ="<>";
	public CommonGrammarGrammarAccess.LComparatorTypeElements getLComparatorTypeAccess() {
		return gaCommonGrammar.getLComparatorTypeAccess();
	}
	
	public EnumRule getLComparatorTypeRule() {
		return getLComparatorTypeAccess().getRule();
	}

	//LQualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public CommonGrammarGrammarAccess.LQualifiedNameWithWildCardElements getLQualifiedNameWithWildCardAccess() {
		return gaCommonGrammar.getLQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getLQualifiedNameWithWildCardRule() {
		return getLQualifiedNameWithWildCardAccess().getRule();
	}

	//LFQN:
	//	ID ("." ID)*;
	public CommonGrammarGrammarAccess.LFQNElements getLFQNAccess() {
		return gaCommonGrammar.getLFQNAccess();
	}
	
	public ParserRule getLFQNRule() {
		return getLFQNAccess().getRule();
	}

	//ValidIDWithKeywords:
	//	"cachable" | "id" | "uuid" | "transient" | "version" | "derived" "collection" | "refers" | "settings" | "lazy" |
	//	"notnull" | "dto" | "date" | "mapto" | "ref" | "cascade" | "var" | ID;
	public CommonGrammarGrammarAccess.ValidIDWithKeywordsElements getValidIDWithKeywordsAccess() {
		return gaCommonGrammar.getValidIDWithKeywordsAccess();
	}
	
	public ParserRule getValidIDWithKeywordsRule() {
		return getValidIDWithKeywordsAccess().getRule();
	}

	//ValidLFQNWithKeywords:
	//	ValidIDWithKeywords ("." ValidIDWithKeywords)*;
	public CommonGrammarGrammarAccess.ValidLFQNWithKeywordsElements getValidLFQNWithKeywordsAccess() {
		return gaCommonGrammar.getValidLFQNWithKeywordsAccess();
	}
	
	public ParserRule getValidLFQNWithKeywordsRule() {
		return getValidLFQNWithKeywordsAccess().getRule();
	}

	//Multiplicity returns types::LMultiplicity:
	//	"[" lower=LowerBound (".." upper=UpperBound)? "]";
	public CommonGrammarGrammarAccess.MultiplicityElements getMultiplicityAccess() {
		return gaCommonGrammar.getMultiplicityAccess();
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//enum LowerBound returns types::LLowerBound:
	//	MANY="*" | ZERO="0" | OPTIONAL="?" | ATLEASTONE="+" | ONE="1";
	public CommonGrammarGrammarAccess.LowerBoundElements getLowerBoundAccess() {
		return gaCommonGrammar.getLowerBoundAccess();
	}
	
	public EnumRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}

	//enum UpperBound returns types::LUpperBound:
	//	MANY="*" | ONE="1";
	public CommonGrammarGrammarAccess.UpperBoundElements getUpperBoundAccess() {
		return gaCommonGrammar.getUpperBoundAccess();
	}
	
	public EnumRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}

	//LInt returns ecore::EInt:
	//	INT;
	public CommonGrammarGrammarAccess.LIntElements getLIntAccess() {
		return gaCommonGrammar.getLIntAccess();
	}
	
	public ParserRule getLIntRule() {
		return getLIntAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaCommonGrammar.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaCommonGrammar.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaCommonGrammar.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaCommonGrammar.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaCommonGrammar.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaCommonGrammar.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaCommonGrammar.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaCommonGrammar.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaCommonGrammar.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaCommonGrammar.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaCommonGrammar.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaCommonGrammar.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaCommonGrammar.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaCommonGrammar.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaCommonGrammar.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaCommonGrammar.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaCommonGrammar.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaCommonGrammar.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaCommonGrammar.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaCommonGrammar.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaCommonGrammar.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaCommonGrammar.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaCommonGrammar.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaCommonGrammar.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaCommonGrammar.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaCommonGrammar.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaCommonGrammar.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaCommonGrammar.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaCommonGrammar.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaCommonGrammar.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaCommonGrammar.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaCommonGrammar.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaCommonGrammar.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaCommonGrammar.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaCommonGrammar.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaCommonGrammar.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaCommonGrammar.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaCommonGrammar.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaCommonGrammar.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaCommonGrammar.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaCommonGrammar.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaCommonGrammar.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaCommonGrammar.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaCommonGrammar.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaCommonGrammar.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaCommonGrammar.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaCommonGrammar.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaCommonGrammar.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaCommonGrammar.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaCommonGrammar.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaCommonGrammar.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaCommonGrammar.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaCommonGrammar.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaCommonGrammar.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaCommonGrammar.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaCommonGrammar.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaCommonGrammar.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaCommonGrammar.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaCommonGrammar.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaCommonGrammar.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaCommonGrammar.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaCommonGrammar.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaCommonGrammar.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaCommonGrammar.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommonGrammar.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaCommonGrammar.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaCommonGrammar.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaCommonGrammar.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaCommonGrammar.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaCommonGrammar.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaCommonGrammar.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaCommonGrammar.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaCommonGrammar.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaCommonGrammar.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaCommonGrammar.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaCommonGrammar.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaCommonGrammar.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaCommonGrammar.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaCommonGrammar.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaCommonGrammar.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaCommonGrammar.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaCommonGrammar.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaCommonGrammar.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaCommonGrammar.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaCommonGrammar.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaCommonGrammar.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommonGrammar.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaCommonGrammar.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommonGrammar.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommonGrammar.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommonGrammar.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommonGrammar.getANY_OTHERRule();
	} 
}
