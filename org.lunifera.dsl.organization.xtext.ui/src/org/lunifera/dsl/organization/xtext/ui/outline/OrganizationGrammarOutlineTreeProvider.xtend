/**
 * Copyright (c) 2011 - 2013, Committers of lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Cristiano Gaviao - Initial implementation
 */
package org.lunifera.dsl.organization.xtext.ui.outline

import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.lunifera.dsl.organization.semantic.model.BusinessRole
import org.lunifera.dsl.organization.semantic.model.Group
import org.lunifera.dsl.organization.semantic.model.Organization
import org.lunifera.dsl.organization.semantic.model.OrganizationUnit
import org.lunifera.dsl.organization.semantic.model.Partnership
import org.lunifera.dsl.organization.semantic.model.Person
import org.lunifera.dsl.organization.semantic.model.Worker

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class OrganizationGrammarOutlineTreeProvider extends DefaultOutlineTreeProvider {
	private VirtualOutlineNode personsGroup;
	private VirtualOutlineNode groupsGroup;
	private VirtualOutlineNode bRolesGroup;
	private VirtualOutlineNode partenershipsGroup;
	private VirtualOutlineNode unitsGroup;
	private VirtualOutlineNode workersGroup;

	/**
	 * Skip the root node.
	 * 
	 * @param parentNode
	 * @param model
	 */
	def void _createChildren(IOutlineNode parentNode, Organization organization) {
		for (Person element : organization.getPersons()) {
			createNode(getPersonGroup(parentNode), element);
		}
		for (Group element : organization.getGroups()) {
			createNode(getGroupsGroup(parentNode), element);
		}
		for (Partnership element : organization.getPartnerships()) {
			createNode(getPartnershipsGroup(parentNode), element);
		}
		for (BusinessRole element : organization.getRoles()) {
			createNode(getRolesGroup(parentNode), element);
		}
		for (OrganizationUnit element : organization.getUnits()) {
			createNode(getUnitsGroup(parentNode), element);
		}
		for (Worker element : organization.getWorkers()) {
			createNode(getWorkersGroup(parentNode), element);
		}
	}

	def VirtualOutlineNode getPersonGroup(IOutlineNode parentNode) {
		if (personsGroup == null) {
			personsGroup = new VirtualOutlineNode(parentNode, null, "Persons", false);
		}
		return personsGroup;
	}

	def VirtualOutlineNode getGroupsGroup(IOutlineNode parentNode) {
		if (groupsGroup == null) {
			groupsGroup = new VirtualOutlineNode(parentNode, null, "Groups", false);
		}
		return groupsGroup;
	}

	def VirtualOutlineNode getRolesGroup(IOutlineNode parentNode) {
		if (bRolesGroup == null) {
			bRolesGroup = new VirtualOutlineNode(parentNode, null, "Roles", false);
		}
		return bRolesGroup;
	}

	def VirtualOutlineNode getUnitsGroup(IOutlineNode parentNode) {
		if (unitsGroup == null) {
			unitsGroup = new VirtualOutlineNode(parentNode, null, "Units", false);
		}
		return unitsGroup;
	}

	def VirtualOutlineNode getPartnershipsGroup(IOutlineNode parentNode) {
		if (partenershipsGroup == null) {
			partenershipsGroup = new VirtualOutlineNode(parentNode, null, "Partnerships", false);
		}
		return partenershipsGroup;
	}

	def VirtualOutlineNode getWorkersGroup(IOutlineNode parentNode) {
		if (workersGroup == null) {
			workersGroup = new VirtualOutlineNode(parentNode, null, "Workers", false);
		}
		return workersGroup;
	}
}
