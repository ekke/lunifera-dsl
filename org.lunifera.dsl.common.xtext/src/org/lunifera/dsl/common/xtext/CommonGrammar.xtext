/**
 * Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Annotations based on Xtend.xtext (EPL by Itemis)
 * 
 * Contributors: 
 * 		Florian Pirchner - Initial implementation
 */
grammar org.lunifera.dsl.common.xtext.CommonGrammar with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.lunifera.org/dsl/common/types/v1"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
 
TypedPackage returns LTypedPackage:
	{LTypedPackage}
	'package' name=QualifiedName ('{'
	(imports+=Import)*
	(types+=Type)*
	'}')?;

Type returns LType:
	ScalarType | Class;

	/**
 * Needs to be overridden by sub grammar
 */
Class returns LClass:
	{LClass} annotations+=AnnotationDef*
	{LClass.annotationInfo=current}
	'class';

Import returns LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard ';';

DataType returns LDataType:
	'datatype' name=ValidIDWithKeywords
	(('jvmType' jvmTypeReference=JvmTypeReference (asPrimitive?='as primitive')?)
	|
	(date?='dateType' dateType=DateType)
	|
	(asBlob?='as blob'))
	';';

enum DateType returns LDateType:
	DATE='date' | TIME='time' | TIMESTAMP='timestamp';

ScalarType returns LScalarType:
	DataType | Enum;

Modifier returns LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;

Enum returns LEnum:
	'enum' name=ID
	('{'
	(literals+=EnumLiteral ((',')? literals+=EnumLiteral)*)?
	'}')?;

EnumLiteral returns LEnumLiteral:
	name=ID;

AnnotationDef returns LAnnotationDef:
	=> (annotation=XAnnotation);

enum LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

ValidIDWithKeywords:
	'cachable' | 'id' | 'transient' | 'version' |
	'collection' | 'refers' | 'settings' | 'lazy' |
	'notnull' | 'dto' |  'date' | 
	ID;

Multiplicity returns LMultiplicity:
	'[' (lower=LowerBound) ('..' upper=UpperBound)? ']';

enum LowerBound returns LLowerBound:
	MANY='*' | ZERO='0' | OPTIONAL='?' | ATLEASTONE='+' | ONE='1';

enum UpperBound returns LUpperBound:
	MANY='*' | ONE='1';
	 
LInt returns ecore::EInt:
	INT;
	